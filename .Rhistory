row=1, col=i)
fig.show()
from plotly.subplots import make_subplots
import plotly.graph_objects as go
islands = penguins["island"].unique()
fig = make_subplots(rows = 1, cols = len(islands), shared_yaxes = True, shared_xaxes = True)
for i, island in enumerate(islands, start=1):
penguins_subset = penguins[penguins["island"] == island]
for species in penguins_subset['species'].unique():
species_data = penguins_subset[penguins_subset['species'] == species]
fig.add_trace(go.Scatter(x=species_data['bill_length_mm'], y=species_data['flipper_length_mm'],
mode='markers', name=species, legendgroup=species),
row=1, col=i)
fig.show()
import plotly.graph_objects as go
from plotly.subplots import make_subplots
# Assuming the penguins DataFrame is already loaded
# Unique islands and species for consistent color mapping
islands = penguins['island'].unique()
species = penguins['species'].unique()
# Predefine colors for each species
color_map = {spec: color for spec, color in zip(species, px.colors.qualitative.Plotly)}
# Create subplots
fig = make_subplots(rows=1, cols=len(islands), shared_yaxes=True, subplot_titles=islands)
# Loop through each island and add a scatter plot for each species
for i, island in enumerate(islands, start=1):
filtered_data = penguins[penguins['island'] == island]
for spec in species:
species_data = filtered_data[filtered_data['species'] == spec]
fig.add_trace(go.Scatter(x=species_data['bill_length_mm'], y=species_data['flipper_length_mm'],
mode='markers', name=spec, legendgroup=spec,
marker=dict(color=color_map[spec])),
row=1, col=i)
# Update layout to avoid repeating legend entries for each subplot
fig.update_layout(height=600, width=1000, title_text="Penguin Measurements by Island")
fig.update_traces(showlegend=False)
fig.for_each_trace(lambda trace: trace.update(showlegend=True) if trace.legendgroup == species[0] else ())
fig.show()
px.scatter(
penguins,
x="bill_length_mm",
y="flipper_length_mm",
color="species",  # Color points by species
symbol="species",  # Use different symbols for species
facet_col="island",  # Facet by island
title="Penguin Size Metrics Faceted by Island"
)
px.scatter(
penguins,
x = "bill_length_mm", y = "flipper_length_mm",
color = "species", facet_col = "island"
)
px.scatter(
penguins,
x = "bill_length_mm", y = "flipper_length_mm"
)
px.bar(penguins,
x="species",
color="island"
)
species_island_counts = (penguins
.groupby(['species', 'island'])
.size()
.reset_index(name="n")
.groupby('species')
.assign(percentage = lambda x: x["n"] / x.sum(x["n"]))
)
species_island_counts = (penguins
.groupby(['species', 'island'])
.size()
.reset_index(name="n")
# .groupby('species')
# .assign(percentage = lambda x: x["n"] / x.sum(x["n"]))
)
species_island_counts
species_island_counts = (penguins
.groupby(['species', 'island'])
.size()
.reset_index(name="n")
.groupby('species')
# .assign(percentage = lambda x: x["n"] / x.sum(x["n"]))
)
species_island_counts
species_island_counts = (penguins
.groupby(['species', 'island'])
.size()
.reset_index(name="n")
.groupby('species')
.assign(percentage = lambda x: x["n"] / x.sum(x["n"]))
)
species_island_counts = (penguins
.groupby(['species', 'island'])
.size()
.reset_index(name="n")
.groupby('species')
.assign(percentage=lambda x: x["n"] / x.groupby('species')["n"].transform("sum"))
)
species_island_counts = (penguins
.groupby(['species', 'island'])
.size()
.reset_index(name="n")
.assign(percentage=lambda x: x["n"] / x.groupby('species')["n"].transform("sum"))
)
species_island_counts
subtitle = "Test",
alt.Chart(penguins).mark_bar().encode(
x=alt.X('bill_length_mm:Q', bin=alt.Bin(step=2), title='Bill Length (mm)'),
y=alt.Y('count()', title='Number of Penguins')
)
(alt.Chart(penguins)
.mark_point(size=100, filled=True)
.encode(
x=alt.X('bill_length_mm', title='Bill length (mm)', axis=alt.Axis(tickCount=5, grid=False)),
y=alt.Y('flipper_length_mm', title='Flipper length (mm)', axis=alt.Axis(tickCount=5, grid=False)),
color='species:N',
shape='species:N')
.properties(
title='Bill length vs. flipper length')
.configure_view(
stroke='transparent',  # Remove the chart border
fill='white')
.configure_axis(
labelFontSize=10,
titleFontSize=12)
)
bp.figure(x_range=island_counts["island"], height=350)
# Chunk 1
import pandas as pd
import plotly.express as px
import bokeh.plotting as bp
import altair as alt
from palmerpenguins import load_penguins
penguins = load_penguins().dropna()
# Chunk 2
(px.scatter(
penguins, x = "bill_length_mm", y = "flipper_length_mm",
color = "species", symbol = "species",
title = "Bill length vs. flipper length",
labels={"bill_length_mm": "Bill length (mm)",
"flipper_length_mm": "Flipper length (mm)",
"species": "Species"})
.update_traces(marker = dict(size = 10))
.update_layout(
plot_bgcolor = 'white',
xaxis = dict(zeroline = False, ticklen = 5),
yaxis = dict(zeroline = False, ticklen = 5))
)
# Chunk 3
# Chunk 4
(alt.Chart(penguins)
.mark_point(size=100, filled=True)
.encode(
x = alt.X("bill_length_mm",
scale = alt.Scale(zero = False),
title = "Bill length (mm)",
axis = alt.Axis(tickCount = 5, grid = False)),
y = alt.Y("flipper_length_mm",
scale = alt.Scale(zero = False),
title = "Flipper length (mm)",
axis = alt.Axis(tickCount = 5, grid = False)),
color = "species:N", shape = "species:N",
tooltip = [alt.Tooltip("bill_length_mm", title = "Bill length (mm)"),
alt.Tooltip("flipper_length_mm", title = "Flipper length (mm)"),
alt.Tooltip("species", title = "Species")])
.properties(title = "Bill length vs. flipper length")
.configure_view(stroke = "transparent", fill = "white")
.configure_axis(labelFontSize = 10, titleFontSize = 12)
)
# Chunk 5
island_counts = (penguins
.groupby("island")
.size()
.reset_index(name = "n")
)
(px.bar(island_counts, x = "island", y = "n")
.update_layout(barmode = "stack")
)
bp.figure(x_range=island_counts["island"], height=350)
(bp.figure(x_range=island_counts["island"], height=350).vbar(x=fruits, top=counts, width=0.9))
island_counts
(bp.figure(x_range=island_counts["island"], height=350).vbar(x=island_counts["island"], top=island_counts["n"], width=0.9))
from bokeh.plotting import figure, show
from bokeh.io import output_notebook
output_notebook()
source = ColumnDataSource(penguins)
from bokeh.models import ColumnDataSource
source = ColumnDataSource(penguins)
# Chunk 1
import pandas as pd
import plotly.express as px
import bokeh.plotting as bp
import altair as alt
from palmerpenguins import load_penguins
penguins = load_penguins().dropna()
# Chunk 2
(px.scatter(
penguins, x = "bill_length_mm", y = "flipper_length_mm",
color = "species", symbol = "species",
title = "Bill length vs. flipper length",
labels={"bill_length_mm": "Bill length (mm)",
"flipper_length_mm": "Flipper length (mm)",
"species": "Species"})
.update_traces(marker = dict(size = 10))
.update_layout(
plot_bgcolor = 'white',
xaxis = dict(zeroline = False, ticklen = 5),
yaxis = dict(zeroline = False, ticklen = 5))
)
# Chunk 3
# Chunk 4
(alt.Chart(penguins)
.mark_point(size=100, filled=True)
.encode(
x = alt.X("bill_length_mm",
scale = alt.Scale(zero = False),
title = "Bill length (mm)",
axis = alt.Axis(tickCount = 5, grid = False)),
y = alt.Y("flipper_length_mm",
scale = alt.Scale(zero = False),
title = "Flipper length (mm)",
axis = alt.Axis(tickCount = 5, grid = False)),
color = "species:N", shape = "species:N",
tooltip = [alt.Tooltip("bill_length_mm", title = "Bill length (mm)"),
alt.Tooltip("flipper_length_mm", title = "Flipper length (mm)"),
alt.Tooltip("species", title = "Species")])
.properties(title = "Bill length vs. flipper length")
.configure_view(stroke = "transparent", fill = "white")
.configure_axis(labelFontSize = 10, titleFontSize = 12)
)
# Chunk 5
island_counts = (penguins
.groupby("island")
.size()
.reset_index(name = "n")
)
(px.bar(island_counts, x = "island", y = "n")
.update_layout(barmode = "stack")
)
source = ColumnDataSource(penguins)
source
p = figure(source = source, x_range="island")
from bokeh.plotting import figure, show
from bokeh.io import output_notebook
from bokeh.models import ColumnDataSource
output_notebook()
source = ColumnDataSource(penguins)
p = figure(source = source, x_range="island")
p = figure(x_range="island")
source = ColumnDataSource(penguins)
p = figure(title="Penguin bill vs. flipper length", x_axis_label='Bill Length (mm)', y_axis_label='Flipper Length (mm)')
# Add a scatter renderer with a size, color, and alpha
p.circle('x', 'y', size=10, source=source)
# Show the results
source = ColumnDataSource(penguins)
p = figure(title="Penguin bill vs. flipper length", x_axis_label='Bill Length (mm)', y_axis_label='Flipper Length (mm)')
# Add a scatter renderer with a size, color, and alpha
p.circle(x = "bill_length_mm", y = "flipper_length_mm", size=10, source=source)
# Show the results
from bokeh.transform import factor_cmap
from bokeh.models import FactorRange
from bokeh.transform import factor_cmap
species_island_counts.sort_values(by=['species', 'island'], inplace=True)
species = species_island_counts['species'].unique()
islands = species_island_counts['island'].unique()
x = [(species, island) for species in species for island in islands]
counts = sum(zip(species_island_counts['percentage'][species_island_counts['island'] == island] for island in islands), ())
source = ColumnDataSource(data=dict(x=x, counts=counts))
p = figure(x_range=FactorRange(*x))
p.vbar(x='x', top='counts', width=0.9, source=source,
line_color="white",
fill_color=factor_cmap('x', palette=Category10[len(islands)], factors=islands, start=1, end=2))
show(p)
import pandas as pd
?.transform_regression
?transform_regression
# Chunk 1
import pandas as pd
import numpy as np
from scipy.stats import gaussian_kde
import statsmodels.api as sm
import plotly.express as px
import plotly.graph_objs as go
import altair as alt
from bokeh.plotting import figure, show
from bokeh.io import output_notebook
from bokeh.models import ColumnDataSource, CategoricalColorMapper, HoverTool, FactorRange
from bokeh.layouts import gridplot
from bokeh.transform import factor_cmap
from bokeh.palettes import Spectral6, Category10
output_notebook()
from palmerpenguins import load_penguins
penguins = load_penguins().dropna()
# Chunk 2
#| warning: false
fig = (px.scatter(
penguins, x = "bill_length_mm", y = "flipper_length_mm",
color = "species", symbol = "species",
title = "Bill length vs. flipper length",
labels={"bill_length_mm": "Bill length (mm)",
"flipper_length_mm": "Flipper length (mm)",
"species": "Species"})
.update_traces(marker = dict(size = 10))
.update_layout(
plot_bgcolor = "white",
xaxis = dict(zeroline = False, ticklen = 5),
yaxis = dict(zeroline = False, ticklen = 5))
)
for species in penguins["species"].unique():
subset = penguins[penguins["species"] == species]
X = subset["bill_length_mm"]
X = sm.add_constant(X)
y = subset["flipper_length_mm"]
model = sm.OLS(y, X).fit()
line = model.params[0] + model.params[1] * subset["bill_length_mm"]
fig.add_trace(go.Scatter(x = subset["bill_length_mm"], y = line,
mode = "lines", showlegend = False))
fig.show()
# Chunk 3
def get_regression_data_sm(df, x_col, y_col):
X = df[[x_col]]
X = sm.add_constant(X)
y = df[y_col]
model = sm.OLS(y, X).fit()
predictions = model.predict(X)
plot_df = pd.DataFrame({
x_col: df[x_col],
y_col: predictions
})
plot_df.sort_values(by=x_col, inplace=True)
return plot_df[x_col], plot_df[y_col]
p = figure(title="Bill length vs. flipper length",
x_axis_label="Bill length (mm)", y_axis_label="Flipper length (mm)",
tools = "pan,wheel_zoom,box_zoom,reset,hover",
tooltips=[
("Bill length (mm)", "@bill_length_mm"),
("Flipper length (mm)", "@flipper_length_mm"),
("Species", "@species")
], toolbar_location=None)
species_list = penguins["species"].unique().tolist()
color_map = {species: color for species, color in zip(species_list, ["blue", "green", "red"])}
for species in species_list:
subset = penguins[penguins["species"] == species]
source = ColumnDataSource(subset)
p.scatter("bill_length_mm", "flipper_length_mm", source=source, legend_label=species,
color=color_map[species], size=10, fill_alpha=0.6)
x, y = get_regression_data_sm(subset, "bill_length_mm", "flipper_length_mm")
p.line(x, y, color=color_map[species], line_width=2, legend_label=species)
p.legend.title = "Species"
p.legend.location = "top_left"
p.background_fill_color = "white"
p.border_fill_color = "white"
p.outline_line_color = None
show(p)
# Chunk 4
points = (alt.Chart(penguins)
.mark_point(size=100, filled=True)
.encode(
x = alt.X("bill_length_mm",
scale = alt.Scale(zero = False),
title = "Bill length (mm)",
axis = alt.Axis(tickCount = 5, grid = False)),
y = alt.Y("flipper_length_mm",
scale = alt.Scale(zero = False),
title = "Flipper length (mm)",
axis = alt.Axis(tickCount = 5, grid = False)),
color = "species:N", shape = "species:N",
tooltip = [alt.Tooltip("bill_length_mm", title = "Bill length (mm)"),
alt.Tooltip("flipper_length_mm", title = "Flipper length (mm)"),
alt.Tooltip("species", title = "Species")])
)
regression_lines = (alt.Chart(penguins)
.transform_regression(
"bill_length_mm", "flipper_length_mm", groupby = ["species"]
)
.mark_line()
.encode(
x = "bill_length_mm:Q", y = "flipper_length_mm:Q", color = "species:N"
)
)
chart = ((points + regression_lines)
.properties(title = "Bill length vs. flipper length")
.configure_view(stroke = "transparent", fill = "white")
.configure_axis(labelFontSize = 10, titleFontSize = 12)
)
chart
# Chunk 5
island_counts = (penguins
.groupby("island")
.size()
.reset_index(name = "n")
)
(px.bar(island_counts, x = "island", y = "n")
.update_layout(barmode = "stack")
)
# Chunk 6
islands = island_counts["island"].unique().tolist()
p = figure(x_range = islands,
tools = "pan,wheel_zoom,box_zoom,reset,hover")
p.vbar(source = ColumnDataSource(island_counts),
x = "island", top = "n", width = 0.9, line_color = "white")
show(p)
# Chunk 7
island_counts = (penguins
.groupby("island")
.size()
.reset_index(name = "n")
)
(alt.Chart(island_counts)
.mark_bar().encode(x = "island", y = "n")
)
# Chunk 8
(px.histogram(penguins, x = "bill_length_mm")
.update_traces(xbins = dict(size =  2))
)
# Chunk 9
bin_size = 2
bins = np.arange(
start = penguins["bill_length_mm"].min(),
stop = penguins["bill_length_mm"].max() + bin_size,
step = bin_size
)
hist, edges = np.histogram(penguins["bill_length_mm"], bins = bins)
source = ColumnDataSource(
data = dict(top = hist, left = edges[:-1], right = edges[1:])
)
p = figure(tools = "pan,wheel_zoom,box_zoom,reset,hover")
p.quad(source = source,
bottom = 0, top = "top", left = "left", right = "right",
fill_color = "skyblue", line_color = "white")
show(p)
# Chunk 10
(alt.Chart(penguins)
.mark_bar()
.encode(
x = alt.X("bill_length_mm:Q", bin = alt.Bin(step = 2)),
y = alt.Y("count()"),
tooltip = [alt.Tooltip("bill_length_mm:Q", bin = alt.Bin(step = 2)),
alt.Tooltip("count()")])
)
# Chunk 11
(px.histogram(penguins, x = "body_mass_g", color = "species",
histnorm = "density", barmode = "overlay", opacity = 0.5)
.update_traces(marker_line_width = 0.75)
)
# Chunk 12
species_list = penguins["species"].unique()
colors = Category10[len(species_list)]
p = figure(tools = "pan,wheel_zoom,box_zoom,reset,hover")
for i, species in enumerate(species_list):
subset = penguins[penguins["species"] == species]
body_mass = subset["body_mass_g"].dropna()
kde = gaussian_kde(body_mass)
x_range = np.linspace(body_mass.min(), body_mass.max(), 100)
density = kde(x_range)
source = ColumnDataSource(data=dict(body_mass_g=x_range, density=density, species=[species]*len(x_range)))
p.patch("body_mass_g", "density", source=source, alpha=0.5, color=colors[i], legend_label=species)
show(p)
# Chunk 13
(alt.Chart(penguins)
.transform_density("body_mass_g",
as_ = ["body_mass_g", "density"], groupby = ["species"])
.mark_area(opacity = 0.5)
.encode(
x = alt.X("body_mass_g:Q"), y = alt.Y("density:Q"),
color = "species:N", tooltip = ["species:N", "body_mass_g:Q"]
)
)
# Chunk 14
species_island_counts = (penguins
.groupby(["species", "island"])
.size()
.reset_index(name="n")
.assign(percentage = lambda x: x["n"] / x.groupby("species")["n"].transform("sum"))
)
px.bar(species_island_counts, x = "species", y = "percentage",
color = "island", barmode = "stack")
source = ColumnDataSource(data=species_island_counts)
species = penguins["species"].unique()
islands = penguins["island"].unique()
species_island_counts
species
islands
p = figure(x_range=species)
p.vbar_stack(islands, x='percentage', width=0.9, color=colors, source=source)
show(p)
source
source = ColumnDataSource(data=species_island_counts.pivot(index='species', columns='island', values='percentage').fillna(0))
species = penguins["species"].unique()
islands = penguins["island"].unique()
p = figure(x_range = species)
p.vbar_stack(islands, x='percentage', width=0.9, color=colors, source=source)
show(p)
species_island_counts.pivot(index='species', columns='island', values='percentage').fillna(0)
species_island_counts_wide = (species_island_counts
.pivot(index ='species', columns = 'island', values = 'percentage')
.fillna(0)
)
source = ColumnDataSource(data = species_island_counts_wide)
islands = penguins["island"].unique()
p = figure(x_range = species)
p.vbar_stack(source = ColumnDataSource(data = species_island_counts_wide),
islands, x='species', width = 0.9)
show(p)
??vbar_stack
?vbar_stack
)
species_island_counts_wide = (species_island_counts
.pivot(index ='species', columns = 'island', values = 'percentage')
.fillna(0)
)
source = ColumnDataSource(data = species_island_counts_wide)
reticulate::repl_python()
