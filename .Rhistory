import ibis
from ibis import _
from janitor import clean_names
ibis.options.interactive = True
sakura_first_bloom_dates = ibis.read_csv("https://raw.githubusercontent.com/christophscheuch/data-viz-japan/main/data/sakura_first_bloom_dates.csv")
sakura_full_bloom_dates = ibis.read_csv("https://raw.githubusercontent.com/christophscheuch/data-viz-japan/main/data/sakura_full_bloom_dates.csv")
sakura_first_bloom_dates
sakura_full_bloom_dates.columns
sakura_first_bloom_dates.drop("30 Year Average 1981-2010", "Notes").rename(location = "Site Name", is_currently_observed = "Currently Being Observed")
sakura_first_bloom_dates.drop("30 Year Average 1981-2010", "Notes").rename(location = "Site Name", is_currently_observed = "Currently Being Observed").pivot_longer(index=['location', 'is_currently_observed'], names_to = "year", values_to = "first_bloom")
sakura_first_bloom_dates.drop("30 Year Average 1981-2010", "Notes").rename(location = "Site Name", is_currently_observed = "Currently Being Observed").pivot_longer(['location', 'is_currently_observed'], names_to = "year", values_to = "first_bloom")
sakura_first_bloom_dates.drop("30 Year Average 1981-2010", "Notes").rename(location = "Site Name", is_currently_observed = "Currently Being Observed").pivot_longer(~['location', 'is_currently_observed'], names_to = "year", values_to = "first_bloom")
sakura_first_bloom_dates.drop("30 Year Average 1981-2010", "Notes").rename(location = "Site Name", is_currently_observed = "Currently Being Observed").pivot_longer(~'location', names_to = "year", values_to = "first_bloom")
sakura_first_bloom_dates.drop("30 Year Average 1981-2010", "Notes").rename(location = "Site Name", is_currently_observed = "Currently Being Observed").pivot_longer('~location', names_to = "year", values_to = "first_bloom")
sakura_first_bloom_dates.drop("30 Year Average 1981-2010", "Notes").rename(location = "Site Name", is_currently_observed = "Currently Being Observed").pivot_longer(~_.location, names_to = "year", values_to = "first_bloom")
import ibis.selectors as s
sakura_first_bloom_dates.drop("30 Year Average 1981-2010", "Notes").rename(location = "Site Name", is_currently_observed = "Currently Being Observed").pivot_longer(s.r["1953":"2023"], names_to = "year", values_to = "first_bloom")
full_bloom_long = (sakura_full_bloom_dates
.drop("30 Year Average 1981-2010", "Notes")
.rename(location = "Site Name", is_currently_observed = "Currently Being Observed")
.pivot_longer(s.r["1953":"2023"], names_to = "year", values_to = "full_bloom")
)
first_bloom_long.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"])
first_bloom_long
first_bloom_long = (sakura_first_bloom_dates
.drop("30 Year Average 1981-2010", "Notes")
.rename(location = "Site Name", is_currently_observed = "Currently Being Observed")
.pivot_longer(s.r["1953":"2023"], names_to = "year", values_to = "first_bloom")
)
full_bloom_long = (sakura_full_bloom_dates
.drop("30 Year Average 1981-2010", "Notes")
.rename(location = "Site Name", is_currently_observed = "Currently Being Observed")
.pivot_longer(s.r["1953":"2023"], names_to = "year", values_to = "full_bloom")
)
first_bloom_long.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"])
first_bloom_long.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"]).mutate(year = _.year.cast('int32'))
first_bloom_long.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"]).mutate(year = _.year.cast('int32'))
ibis.options.interactive = True
sakura_first_bloom_dates = ibis.read_csv("https://raw.githubusercontent.com/christophscheuch/data-viz-japan/main/data/sakura_first_bloom_dates.csv")
sakura_full_bloom_dates = ibis.read_csv("https://raw.githubusercontent.com/christophscheuch/data-viz-japan/main/data/sakura_full_bloom_dates.csv")
first_bloom_long = (sakura_first_bloom_dates
.drop("30 Year Average 1981-2010", "Notes")
.rename(location = "Site Name", is_currently_observed = "Currently Being Observed")
.pivot_longer(s.r["1953":"2023"], names_to = "year", values_to = "first_bloom")
)
full_bloom_long = (sakura_full_bloom_dates
.drop("30 Year Average 1981-2010", "Notes")
.rename(location = "Site Name", is_currently_observed = "Currently Being Observed")
.pivot_longer(s.r["1953":"2023"], names_to = "year", values_to = "full_bloom")
)
first_bloom_long.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"]).mutate(year = _.year.cast("int32"))
first_bloom_long.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"]).mutate(year = _.year.cast("int32"), full_bloom_day = _.full_bloom - ibis.timestamp(_.year.cast('string') + '-01-01')).seconds().cast('int32') // 86400)
first_bloom_long.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"]).mutate(year = _.year.cast("int32"), full_bloom_day = _.full_bloom - ibis.timestamp(_.year.cast('string') + '-01-01')).seconds().cast('int32') // 86400))
(first_bloom_long
.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"])
.mutate(year = _.year.cast("int32"),
full_bloom_day = _.full_bloom - ibis.timestamp(_.year.cast('string') + '-01-01').seconds().cast('int32') // 86400)
)
(first_bloom_long
.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"])
.mutate(year = _.year.cast("int32"),
full_bloom_day = _.full_bloom - ibis.timestamp(_.year.cast('string') + '-01-01'))
)
first_bloom_long
(first_bloom_long
.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"])
.mutate(year = _.year.cast("int32"))
.mutate(full_bloom_day = _.full_bloom - ibis.timestamp(_.year.cast('string') + '-01-01'))
)
(first_bloom_long
.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"])
.mutate(year = _.year.cast("int32"))
.mutate(full_bloom_day = _.full_bloom - ibis.date(_.year.cast('string') + '-01-01'))
)
(first_bloom_long
.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"])
.mutate(year = _.year.cast("int32"))
.mutate(full_bloom_day = _.full_bloom - ibis.date(_.year.cast('string') + '-01-01'),
time_to_full_bloom = _.full_bloom - _.first_bloom)
)
ibis.options.interactive = True
sakura_first_bloom_dates = ibis.read_csv("https://raw.githubusercontent.com/christophscheuch/data-viz-japan/main/data/sakura_first_bloom_dates.csv")
sakura_full_bloom_dates = ibis.read_csv("https://raw.githubusercontent.com/christophscheuch/data-viz-japan/main/data/sakura_full_bloom_dates.csv")
first_bloom_long = (sakura_first_bloom_dates
.drop("30 Year Average 1981-2010", "Notes")
.rename(location = "Site Name", is_currently_observed = "Currently Being Observed")
.pivot_longer(s.r["1953":"2023"], names_to = "year", values_to = "first_bloom")
)
full_bloom_long = (sakura_full_bloom_dates
.drop("30 Year Average 1981-2010", "Notes")
.rename(location = "Site Name", is_currently_observed = "Currently Being Observed")
.pivot_longer(s.r["1953":"2023"], names_to = "year", values_to = "full_bloom")
)
sakura_dates = (first_bloom_long
.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"])
.mutate(year = _.year.cast("int32"))
.mutate(full_bloom_day = _.full_bloom - ibis.date(_.year.cast('string') + '-01-01'),
time_to_full_bloom = _.full_bloom - _.first_bloom)
)
# Connect to a CSV file via Ibis
observatory_locations = ibis.read_csv("https://raw.githubusercontent.com/Yuriko-Schumacher/statistical-analysis-of-cherry-blossom-first-bloom-date/main/data/observatory-locations.csv")
locations_regions = ibis.read_csv("https://raw.githubusercontent.com/christophscheuch/data-viz-japan/main/data/locations_region.csv")
# Define the southern islands
southern_islands = ["Naze", "Ishigaki Island", "Miyakojima", "Naha", "Minami Daito Island"]
# Use Ibis expressions to modify the DataFrame
locations_regions = locations_regions.mutate(
region=ibis.case()
.when(_.location.isin(southern_islands), "Ryukyu Islands")
.else_(_.region)
.end()
)
sakura_dates.left_join(observatory_locations, "location").left_join(locations_regions, "location")
sakura_dates.left_join(observatory_locations, "location").left_join(locations_regions, "location")
sakura_dates.left_join(observatory_locations, "location")
sakura_dates.left_join(observatory_locations, ["location"])
sakura_dates
observatory_locations
sakura_dates.left_join(observatory_locations, "location")
observatory_locations
locations_regions
locations_regions = ibis.read_csv("https://raw.githubusercontent.com/christophscheuch/data-viz-japan/main/data/locations_region.csv")
southern_islands = ["Naze", "Ishigaki Island", "Miyakojima", "Naha", "Minami Daito Island"]
# Use Ibis expressions to modify the DataFrame
locations_regions = locations_regions.mutate(
region=ibis.case()
.when(_.location.isin(southern_islands), "Ryukyu Islands")
.else_(_.region)
.end()
)
sakura_dates.left_join(locations_regions, "location")
locations_regions
sakura_dates
columns(sakura_dates)
sakura_dates.columns
sakura_dates.left_join(locations_regions, "location")
sakura_dates.left_join(locations_regions, "location", suffixes=('_left', '_right'))
sakura_dates.left_join(locations_regions, "location")
locations_regions
sakura_dates
first_bloom_long
irst_bloom_long = (sakura_first_bloom_dates
.drop("30 Year Average 1981-2010", "Notes")
.rename(location = "Site Name", is_currently_observed = "Currently Being Observed")
.pivot_longer(s.r["1953":"2023"], names_to = "year", values_to = "first_bloom")
)
full_bloom_long = (sakura_full_bloom_dates
.drop("30 Year Average 1981-2010", "Notes")
.rename(location = "Site Name", is_currently_observed = "Currently Being Observed")
.pivot_longer(s.r["1953":"2023"], names_to = "year", values_to = "full_bloom")
)
sakura_dates = (first_bloom_long
.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"])
.mutate(year = _.year.cast("int32"))
.mutate(full_bloom_day = _.full_bloom - ibis.date(_.year.cast('string') + '-01-01'),
time_to_full_bloom = _.full_bloom - _.first_bloom)
)
sakura_dates
sakura_dates.columns
first_bloom_long
full_bloom_long
first_bloom_long
.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"])
first_bloom_long.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"])
sakura_dates = (first_bloom_long.outer_join(full_bloom_long, ["location", "year", "is_currently_observed"])
.select(~s.contains("_right"))
.mutate(year = _.year.cast("int32"))
.mutate(full_bloom_day = _.full_bloom - ibis.date(_.year.cast('string') + '-01-01'),
time_to_full_bloom = _.full_bloom - _.first_bloom)
)
sakura_dates
sakura_dates.left_join(locations_regions, "location")
sakura_dates.left_join(locations_regions, "location").filter(_.is_currently_observed == True & _.year >= 1954 & _.full_bloom_day.notnull() &  _.time_to_full_bloom.notnull())
sakura_dates.left_join(locations_regions, "location").filter([_.is_currently_observed == True, _.year >= 1954, _.full_bloom_day.notnull(), _.time_to_full_bloom.notnull()])
sakura_data = (sakura_dates
.left_join(locations_regions, "location")
.filter([_.is_currently_observed == True, _.year >= 1954, _.full_bloom_day.notnull(), _.time_to_full_bloom.notnull()])
)
(ggplot(sakura_data,
aes(x = "year", y = "full_bloom_day"))
+ geom_point(color = colors[0], alpha = 0.5, size = 2)
+ geom_smooth(method = "lm", se = False,
color = colors[1], size = 2)
+ facet_wrap("~region", nrow = 1)
+ labs(title = "Day of the year with peak cherry tree blossom for regions in Japan since 1953",
subtitle = "Cities in northern regions Hokkaidō and Honshū exhibit earlier full blooms, while Ryukyu Islands even later",
x = None, y = None)
+ scale_x_continuous(breaks = breaks_year)
+ scale_y_continuous(breaks = range(30, 151, 30))
)
from plotnine import *
(ggplot(sakura_data,
aes(x = "year", y = "full_bloom_day"))
+ geom_point(color = colors[0], alpha = 0.5, size = 2)
+ geom_smooth(method = "lm", se = False,
color = colors[1], size = 2)
+ facet_wrap("~region", nrow = 1)
+ labs(title = "Day of the year with peak cherry tree blossom for regions in Japan since 1953",
subtitle = "Cities in northern regions Hokkaidō and Honshū exhibit earlier full blooms, while Ryukyu Islands even later",
x = None, y = None)
+ scale_x_continuous(breaks = breaks_year)
+ scale_y_continuous(breaks = range(30, 151, 30))
)
reticulate::repl_python()
#| message: false
#| warning: false
(ggplot(sakura_data,
aes(x = "year", y = "full_bloom_day"))
+ geom_point(color = colors[0], alpha = 0.5, size = 2)
+ geom_smooth(method = "lm", se = False,
color = colors[1], size = 2)
+ facet_wrap("~region", nrow = 1)
+ labs(title = "Day of the year with peak cherry tree blossom for regions in Japan since 1953",
subtitle = "Cities in northern regions Hokkaidō and Honshū exhibit earlier full blooms, while Ryukyu Islands even later",
x = None, y = None)
+ scale_x_continuous(breaks = breaks_year)
+ scale_y_continuous(breaks = range(30, 151, 30))
)
reticulate::repl_python()
#| message: false
#| warning: false
(ggplot(sakura_data,
aes(x = "year", y = "full_bloom_day"))
+ geom_point(color = colors[0], alpha = 0.5, size = 2)
+ geom_smooth(method = "lm", se = False,
color = colors[1], size = 2)
+ facet_wrap("~region", nrow = 1)
+ labs(title = "Day of the year with peak cherry tree blossom for regions in Japan since 1953",
subtitle = "Cities in northern regions Hokkaidō and Honshū exhibit earlier full blooms, while Ryukyu Islands even later",
x = None, y = None)
+ scale_x_continuous(breaks = breaks_year) +
scale_y_continuous(breaks = range(30, 151, by = 30))
)
reticulate::repl_python()
