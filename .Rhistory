penguins = load_penguins()
import polars as pl
from palmerpenguins import load_penguins
penguins = load_penguins()
penguins
(penguins
.filter(
(pl.col("species") == "Adelie") &
(pl.col("island").is_in(["Biscoe", "Dream"])))
)
penguins = pl.from_pandas(load_penguins())
penguins = pl.from_dataframe(load_penguins())
penguins.info()
penguins =load_penguins()
penguins = pl.from_pandas(penguins)
penguins =load_penguins()
penguins = pl.from_pandas(penguins)
import polars as pl
from palmerpenguins import load_penguins
penguins =load_penguins()
penguins = pl.from_pandas(penguins)
penguins =load_penguins().pipe(pl.from_pandas)
import polars as pl
from palmerpenguins import load_penguins
penguins =load_penguins().pipe(pl.from_pandas)
reticulate::repl_python()
penguins
penguins
penguins
penguins |>
slice(c(10:20, 300))
penguins |>
slice(c(10:20, 300))
?slice
library(dplyr)
penguins |>
slice(c(10:20, 300))
penguins |>
slice(10:20)
reticulate::repl_python()
penguins |>
arrange(species, -bill_length_mm)
?arrange
penguins |>
arrange(species, -bill_length_mm)
penguins |>
arrange(island, -bill_length_mm)
reticulate::repl_python()
penguins |>
mutate(bill_length_mm = bill_length_mm / 10,
bill_length_squared = bill_length_mm^2)
reticulate::repl_python()
penguins
penguins |>
relocate(species, .before = year)
penguins |>
relocate(c(species, bill_length_mm), .before = year)
reticulate::repl_python()
penguins |>
relocate(c(species, bill_length_mm), .before = year)
reticulate::repl_python()
penguins |>
relocate(c(species, bill_length_mm), .before = year)
penguins |>
relocate(c(species, bill_length_mm), .before = year)
reticulate::repl_python()
penguins |>
group_by(island) |>
summarize(count = n(),
bill_depth_mean = mean(bill_depth_mm),
flipper_length_median = median(flipper_length_mm),
share_female = sum(sex == "female"))
penguins |>
group_by(island) |>
summarize(count = n(),
bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE),
flipper_length_median = median(flipper_length_mm, na.rm = TRUE),
share_female = sum(sex == "female", na.rm = TRUE))
reticulate::repl_python()
penguins |>
group_by(island) |>
summarize(count = n(),
bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE),
flipper_length_median = median(flipper_length_mm, na.rm = TRUE),
share_female = sum(sex == "female", na.rm = TRUE))
penguins |>
group_by(island) |>
summarize(count = n(),
bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE),
flipper_length_median = median(flipper_length_mm, na.rm = TRUE),
share_female = mean(sex == "female", na.rm = TRUE))
reticulate::repl_python()
penguins |>
group_by(island) |>
summarize(count = n(),
bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE),
flipper_length_median = median(flipper_length_mm, na.rm = TRUE),
share_female = mean(sex == "female", na.rm = TRUE))
reticulate::repl_python()
penguins |>
group_by(island) |>
summarize(bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE))
reticulate::repl_python()
penguins
penguins |>
group_by(island) |>
summarize(count = n(),
bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE),
flipper_length_median = median(flipper_length_mm, na.rm = TRUE),
body_mass_sd = sd(body_mass_g, na.rm = TRUE)
share_female = mean(sex == "female", na.rm = TRUE))
penguins |>
group_by(island) |>
summarize(count = n(),
bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE),
flipper_length_median = median(flipper_length_mm, na.rm = TRUE),
body_mass_sd = sd(body_mass_g, na.rm = TRUE),
share_female = mean(sex == "female", na.rm = TRUE))
reticulate::repl_python()
penguins |>
group_by(island) |>
summarize(count = n(),
bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE),
flipper_length_median = median(flipper_length_mm, na.rm = TRUE),
body_mass_sd = sd(body_mass_g, na.rm = TRUE),
share_female = mean(sex == "female", na.rm = TRUE))
reticulate::repl_python()
renv::snapshot()
reticulate::repl_python()
reticulate::repl_python()
install.packages("JuliaCall")
??julia_setup
JuliaCall::julia_setup()
library(JuliaCall)
install_julia()
julia_setup()
julia_setup()
julia_setup("/Applications/Julia-1.9.app/Contents/Resources/julia/bin/julia")
julia_setup("~/Applications/Julia-1.9.app/Contents/Resources/julia/bin/julia")
julia_setup("/Users/krise/Library/Application Support/org.R-project.R/R/JuliaCall/julia/1.9.4/Julia-1.9.app/Contents/Resources/julia")
julia_setup("~/Application Support/org.R-project.R/R/JuliaCall/julia/1.9.4/Julia-1.9.app/Contents/Resources/julia")
julia_setup("~/Application Support/org.R-project.R/R/JuliaCall/julia/1.9.4/Julia-1.9.app/Contents/Resources/julia/")
julia_setup(installJulia = TRUE)
julia_setup(installJulia = TRUE)
julia_setup()
install.packages("knitr")
renv::snapshot()
julia_setup("~/Applications/Julia-1.9.app/Contents/Resources/julia/bin/julia/)
julia_setup("~/Applications/Julia-1.9.app/Contents/Resources/julia/bin/julia/")
install.packages("rmarkdown")
JuliaCall::julia_setup("/Applications/Julia-1.9.app/Contents/Resources/julia/")
JuliaCall::julia_setup("/Applications/Julia-1.9.app/Contents/Resources/julia/bin/")
penguins
penguins <- palmerpenguins::penguins
penguins
penguins |> distinct(year)
penguins |> dplyr::distinct(year)
PalmerPenguins
library(ggplot2)
library(palmerpenguins)
penguins <- na.omit(palmerpenguins::penguins)
ggplot(penguins,
aes(x = bill_length_mm, y = bill_depth_mm,
color = species, shape = species)) +
geom_point() +
geom_smooth(method = "lm", formula = 'y ~ x') +
labs(x = "Bill length (mm)", y = "Bill Width (mm)",
title = "Bill Length vs. Bill Width",
subtitle = "Using geom_point and geom_smooth of the ggplot2 package",
color = "Species", shape = "Species") +
theme_minimal()
lggplot(penguins, aes(x = fct_infreq(species))) +
geom_bar()
ggplot(penguins, aes(x = fct_infreq(species))) +
geom_bar()
?fct_infreq
??fct_infreq
ggplot(penguins,
aes(x = species)) +
geom_bar()
penguins
ggplot(penguins,
aes(x = island)) +
geom_bar()
reticulate::repl_python()
penguins
ggplot(penguins,
aes(x = bill_length_mm)) +
geom_histogram(binwidth = 200)
ggplot(penguins,
aes(x = bill_length_mm)) +
geom_histogram(binwidth = 5)
ggplot(penguins,
aes(x = bill_length_mm)) +
geom_histogram(binwidth = 10)
ggplot(penguins,
aes(x = bill_length_mm)) +
geom_histogram(binwidth = 2.5)
ggplot(penguins,
aes(x = bill_length_mm)) +
geom_histogram(binwidth = 2)
reticulate::repl_python()
ggplot(penguins,
aes(x = bill_length_mm)) +
geom_histogram(binwidth = 2) +
geom_density()
ggplot(penguins,
aes(x = bill_length_mm)) +
geom_histogram(binwidth = 2) +
geom_density()
ggplot(penguins,
aes(x = bill_length_mm)) +
# geom_histogram(binwidth = 2) +
geom_density()
ggplot(penguins,
aes(x = bill_length_mm)) +
geom_histogram(binwidth = 2) +
geom_density()
ggplot(penguins,
aes(x = bill_length_mm)) +
geom_histogram(binwidth = 2)
reticulate::repl_python()
ggplot(penguins, aes(x = body_mass_g, color = species)) +
geom_density(linewidth = 0.75)
reticulate::repl_python()
ggplot(penguins,
aes(x = body_mass_g, color = species, fill = species)) +
geom_density(linewidth = 0.75, alpha = 0.5)
ggplot(penguins,
aes(x = body_mass_g, color = species, fill = species)) +
geom_density(size = 0.75, alpha = 0.5)
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar(position = "fill")
reticulate::repl_python()
ggplot(penguins, aes(x = species, fill = island)) +
geom_bar(position = "fill")
reticulate::repl_python()
penguins
ggplot(penguins, aes(x = bill_length_mm, y = flipper_length_mm)) +
geom_point()
reticulate::repl_python()
ggplot(penguins,
aes(x = bill_length_mm, y = flipper_length_mm)) +
geom_point()
ggplot(penguins,
aes(x = bill_length_mm, y = flipper_length_mm)) +
geom_point(size = 2)
reticulate::repl_python()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) +
facet_wrap(~island)
ggplot(penguins,
aes(x = bill_length_mm, y = flipper_length_mm)) +
geom_point(aes(color = island, shape = island)) +
facet_wrap(~species)
reticulate::repl_python()
ggsave(penguins_figure, filename = "penguins-figure.png",
width = 4, height = 3, dpi = 300)
penguins_figure <- penguins |>
ggplot(aes(x = bill_length_mm, y = flipper_length_mm)) +
geom_point()
ggsave(penguins_figure, filename = "penguins-figure.png",
width = 4, height = 3, dpi = 300)
penguins_figure <- penguins |>
ggplot(aes(x = bill_length_mm, y = flipper_length_mm)) +
geom_point()
ggsave(penguins_figure, filename = "penguins-figure.png",
width = 7, height = 5, dpi = 300)
reticulate::repl_python()
reticulate::repl_python()
renv::snapshot()
library(lubridate)
data <- data.frame(
character_column = c("A", "B", "C", "D"),
date_column = as.Date(c("2023-01-01", "2023-02-01", "2023-03-01", "2023-04-01")),
datetime_column = ymd_hms(c("2023-01-01 10:00:00", "2023-02-01 11:00:00",
"2023-03-01 12:00:00", "2023-04-01 13:00:00")),
numeric_column = c(1.5, 2.5, 3.5, 4.5),
integer_column = as.integer(c(1, 2, 3, 4))
)
data
library(tidyverse)
data <- data.frame(
character_column = c("A", "B", "C", "D"),
date_column = as.Date(c("2023-01-01", "2023-02-01", "2023-03-01", "2023-04-01")),
datetime_column = ymd_hms(c("2023-01-01 10:00:00", "2023-02-01 11:00:00",
"2023-03-01 12:00:00", "2023-04-01 13:00:00")),
numeric_column = c(1.5, 2.5, 3.5, 4.5),
integer_column = as.integer(c(1, 2, 3, 4))
)
data <- tibble(
character_column = c("A", "B", "C", "D"),
date_column = as.Date(c("2023-01-01", "2023-02-01", "2023-03-01", "2023-04-01")),
datetime_column = ymd_hms(c("2023-01-01 10:00:00", "2023-02-01 11:00:00",
"2023-03-01 12:00:00", "2023-04-01 13:00:00")),
numeric_column = c(1.5, 2.5, 3.5, 4.5),
integer_column = as.integer(c(1, 2, 3, 4))
)
data
data <- tibble(
character_column = c("A", "B", "C", "D"),
date_column = as.Date(c("2023-01-01", "2023-02-01", "2023-03-01", "2023-04-01")),
datetime_column = ymd_hms(c("2023-01-01 10:00:00", "2023-02-01 11:00:00",
"2023-03-01 12:00:00", "2023-04-01 13:00:00")),
numeric_column = c(1.5, 2.5, 3.5, 4.5),
integer_column = as.integer(c(1, 2, 3, 4)),
logical_column = c(TRUE, FALSE, FALSE, TRUE)
)
data
?write_csv
install.packages("RSQLite")
install.packages("duckdb")
library(duckdb)
library(RSQLite)
install.packages("arrow")
# Chunk 1
library(tidyverse)
data <- tibble(
character_column = c("A", "B", "C", "D"),
date_column = as.Date(c("2023-01-01", "2023-02-01", "2023-03-01", "2023-04-01")),
datetime_column = ymd_hms(c("2023-01-01 10:00:00", "2023-02-01 11:00:00",
"2023-03-01 12:00:00", "2023-04-01 13:00:00")),
numeric_column = c(1.5, 2.5, 3.5, 4.5),
integer_column = as.integer(c(1, 2, 3, 4)),
logical_column = c(TRUE, FALSE, FALSE, TRUE)
)
data |>
glimpse()
data <- read_csv("data.csv")
data |>
glimpse()
write_csv(data, file = "data.csv")
data <- read_csv("data.csv")
data |>
glimpse()
con_sqlite <- dbConnect(SQLite(), "data.sqlite")
library(RSQLite)
con_sqlite <- dbConnect(SQLite(), "data.sqlite")
con_sqlite
dbWriteTable(con_sqlite, "data", value = data, overwrite = TRUE)
data_sqlite <- tbl(con_sqlite, "data") |>
collect()
data_sqlite |>
glimpse()
?copy_to
copy_to(con_sqlite, data, "dta", overwrite = TRUE)
data_sqlite <- tbl(con_sqlite, "data") |>
collect()
data_sqlite |>
glimpse()
library(duckdb)
con_duckdb <- dbConnect(duckdb(), "data.duckdb")
con_duckdb
copy_to(con_duckdb, data, "dta", overwrite = TRUE)
data_duckdb <- tbl(con_duckdb, "data") |>
collect()
tbl(con_duckdb, "data")
library(duckdb)
con_duckdb <- dbConnect(duckdb(), "data.duckdb")
copy_to(con_duckdb, data, "dta", overwrite = TRUE)
con_duckdb
tbl(con_duckdb, "data")
copy_to(con_duckdb, data, "data", overwrite = TRUE)
data_duckdb <- tbl(con_duckdb, "data") |>
collect()
data_duckdb |>
glimpse()
library(arrow)
?write_parquet
write_parquet(data, "data.parquet")
data_parquet <- read_parquet("data.parquet")
data_parquet |>
glimpse()
duckdb_shutdown(con_sqlite)
library(duckdb)
con_duckdb <- dbConnect(duckdb(), "data.duckdb")
copy_to(con_duckdb, data, "data", overwrite = TRUE)
data_duckdb <- tbl(con_duckdb, "data") |>
collect()
duckdb_shutdown(con_duckdb)
library(duckdb)
con_duckdb <- dbConnect(duckdb(), "data.duckdb")
copy_to(con_duckdb, data, "data", overwrite = TRUE)
data_duckdb <- tbl(con_duckdb, "data") |>
collect()
duckdb_shutdown(duckdb())
data_duckdb |>
glimpse()
# Chunk 1
library(tidyverse)
data <- tibble(
character_column = c("A", "B", "C", "D"),
date_column = as.Date(c("2023-01-01", "2023-02-01", "2023-03-01", "2023-04-01")),
datetime_column = ymd_hms(c("2023-01-01 10:00:00", "2023-02-01 11:00:00",
"2023-03-01 12:00:00", "2023-04-01 13:00:00")),
numeric_column = c(1.5, 2.5, 3.5, 4.5),
integer_column = as.integer(c(1, 2, 3, 4)),
logical_column = c(TRUE, FALSE, FALSE, TRUE)
)
# Chunk 2
#| message: false
write_csv(data, file = "data.csv")
data_csv <- read_csv("data.csv")
data_csv |>
glimpse()
# Chunk 3
library(RSQLite)
con_sqlite <- dbConnect(SQLite(), "data.sqlite")
copy_to(con_sqlite, data, "data", overwrite = TRUE)
data_sqlite <- tbl(con_sqlite, "data") |>
collect()
data_sqlite |>
glimpse()
library(duckdb)
con_duckdb <- dbConnect(duckdb(), "data.duckdb")
copy_to(con_duckdb, data, "data", overwrite = TRUE)
data_duckdb <- tbl(con_duckdb, "data") |>
collect()
duckdb_shutdown(duckdb())
data_duckdb |>
glimpse()
data_duckdb |>
glimpse()
reticulate::repl_python()
