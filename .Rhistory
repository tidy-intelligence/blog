k_means_results |>
mutate(withinss = map_dbl(kclust, ~sum(.$sse_within_total_total)))
kmeans_logwithindiss <- k_means_results |>
mutate(withinss = map_dbl(kclust, ~sum(.$sse_within_total_total)))
kmeans_logwithindiss <- k_means_results |>
mutate(withinss = map_dbl(kclust, ~sum(.$sse_within_total_total))) |>
mutate(logwithindiss = log(withinss) - log(withinss[k == 1]))
kmeans_logwithindiss
k_means_logwithindiss <- k_means_results |>
mutate(withinss = map_dbl(kclust, ~sum(.$sse_within_total_total))) |>
mutate(logwithindiss = log(withinss) - log(withinss[k == 1]))
k_means_metrics <- k_means_results |>
mutate(withinss = map_dbl(kclust, ~sum(.$sse_within_total_total))) |>
mutate(logwithiniss = log(withinss) - log(withinss[k == 1]))
k_means_metrics
k_means_metrics <- k_means_results |>
mutate(within_sse = map_dbl(kclust, ~sum(.$sse_within_total_total))) |>
mutate(log_within_sse = log(within_sse) - log(within_sse[k == 1]))
k_means_metrics <- k_means_results |>
mutate(
within_sse = map_dbl(kclust, ~sum(.$sse_within_total_total)),
log_within_sse = log(within_sse) - log(within_sse[k == 1])
)
k_means_metrics
k_modes_example <- k_means(num_clusters = 3) |>
set_engine("klaR") |>
fit(~ q1 + q2+ q3 + q4,
data = labelled_respondents
)
k_modes_example
k_means(num_clusters = num_clusters) |>
set_engine("stats") |>
fit(~ q1 + q2+ q3 + q4,
data = labelled_respondents
) |>
extract_fit_summary()
fit_k_means <- function(num_clusters) {
k_means(num_clusters = num_clusters) |>
set_engine("stats") |>
fit(~ q1 + q2+ q3 + q4,
data = labelled_respondents
) |>
extract_fit_summary()
}
k_means_results <- tibble(k = k_min:k_max) |>
mutate(
kclust = map(k, fit_k_means),
)
k_modes_example |> extract_fit_summary()
k_modes_example |> extract_fit_summary() |> str()
fit_k_means <- function(num_clusters, engine) {
k_means(num_clusters = num_clusters) |>
set_engine(engine) |>
fit(~ q1 + q2+ q3 + q4,
data = labelled_respondents
) |>
extract_fit_summary()
}
k_means_results <- tibble(k = k_min:k_max) |>
mutate(
kclust = map(k, ~fit_k_means(., engine = "stats")),
)
k_modes_results <- tibble(k = k_min:k_max) |>
mutate(
kclust = map(k, ~fit_k_means(., engine = "klaR")),
)
k_modes_results
k_modes_results <- tibble(k = k_min:k_max) |>
mutate(
kclust = map(k, ~fit_k_means(., engine = "klaR")),
) |>
mutate(
within_sse = map_dbl(kclust, ~sum(.$sse_within_total_total)),
log_within_sse = log(within_sse) - log(within_sse[k == 1])
)
k_modes_results
tibble(k = k_min:k_max) |>
mutate(
kclust = map(k, ~fit_k_means(., engine = "klaR")),
)
k_modes_results <- tibble(k = k_min:k_max) |>
mutate(
kclust = map(k, ~fit_k_means(., engine = "klaR")),
)
k_modes_results$kclust[[1]]
k_modes_results$kclust[[1]] |> str()
k_modes_results$kclust[[2]] |> str()
k_modes_results$kclust[[3]] |> str()
?sample_n
#| message: false
#| warning: false
library(dplyr)
library(purrr)
requireNamespace(c("scales", "klaR", "cluster"), quietly = TRUE)
centers <- tibble(
cluster = factor(1:3),
respondents = c(250, 500, 200),
q1 = c(1, 0, 1),
q2 = c(0, 1, 1),
q3 = c(0, 1, 1),
q4 = c(0, 0, 1)
)
set.seed(123)
labelled_respondents <- centers |>
mutate(
across(
starts_with("q"),
~map2(respondents, .x, function(x, y) {
rbinom(x, 1, max((y - 0.1), 0.1))
}),
.names = "{col}"
)
) |>
select(-respondents) |>
unnest(cols = c(q1, q2, q3, q4)) |>
sample_n(n())
?unnest
??unnest
#| message: false
#| warning: false
library(dplyr)
library(tidyr)
library(purrr)
requireNamespace(c("scales", "klaR", "cluster"), quietly = TRUE)
library(tidyverse)
library(tidyquant)
library(frenchdata)
library(scales)
dax_raw <- tq_get(
"^GDAXI", get = "stock.prices",
from = "1988-07-01", to = "2023-10-30"
)
dax <- dax_raw |>
select(date, price = adjusted)
dax <- dax |>
arrange(date) |>
fill(price, .direction = "down")
dax |>
ggplot(aes(x = date, y = price)) +
geom_line() +
labs(x = "", y = "Adjusted Price") +
scale_x_date(expand = c(0, 0), breaks = "5 years") +
scale_y_continuous(breaks = pretty_breaks()) +
theme_classic()
dax |>
ggplot(aes(x = date, y = price)) +
geom_line() +
labs(x = NULL, y = "Adjusted Price") +
scale_x_date(expand = c(0, 0), breaks = "5 years") +
scale_y_continuous(breaks = pretty_breaks()) +
theme_classic()
dax |>
ggplot(aes(x = date, y = price)) +
geom_line() +
labs(x = NULL, y = "Adjusted Price") +
scale_x_date(expand = c(0, 0), breaks = "5 years") +
scale_y_continuous(labels = scales::comma) +
theme_classic()
dax |>
ggplot(aes(x = date, y = price)) +
geom_line() +
labs(x = NULL, y = "Adjusted Price") +
scale_x_date(expand = c(0, 0), date_breaks = "5 years") +
scale_y_continuous(labels = scales::comma) +
theme_classic()
dax |>
ggplot(aes(x = date, y = price)) +
geom_line() +
labs(x = NULL, y = "Adjusted Price") +
scale_x_date() +
scale_y_continuous(labels = scales::comma) +
theme_classic()
dax |>
ggplot(aes(x = date, y = price)) +
geom_line() +
labs(x = NULL, y = "Adjusted Price") +
# scale_x_date() +
scale_y_continuous(labels = scales::comma) +
theme_classic()
dax |>
ggplot(aes(x = date, y = price)) +
geom_line() +
labs(x = NULL, y = "Adjusted Price") +
scale_x_date(breaks = "5 years") +
scale_y_continuous(labels = scales::comma) +
theme_classic()
dax |>
ggplot(aes(x = date, y = price)) +
geom_line() +
labs(x = NULL, y = "Adjusted Price") +
scale_x_date(date_breaks = "5 years") +
scale_y_continuous(labels = scales::comma) +
theme_classic()
dax |>
ggplot(aes(x = date, y = price)) +
geom_line() +
labs(x = NULL, y = "Adjusted Price") +
scale_x_date() +
scale_y_continuous(labels = scales::comma) +
theme_classic()
dax |>
ggplot(aes(x = date, y = price)) +
geom_line() +
labs(x = NULL, y = "Adjusted Price") +
scale_y_continuous(labels = scales::comma) +
theme_classic()
dax |>
ggplot(aes(x = date, y = price)) +
geom_line() +
labs(x = NULL, y = "Adjusted Price") +
scale_y_continuous(labels = scales::comma)
dax_monthly <- dax |>
mutate(year = year(date),
month = factor(month(date))) |>
group_by(year, month) |>
filter(date == max(date)) |>
ungroup() |>
arrange(date) |>
mutate(ret = price / lag(price) - 1) |>
drop_na()
dax_monthly
factors_ff3_monthly_raw <- download_french_data("Fama/French 3 Factors")
risk_free_monthly <- factors_ff3_monthly_raw$subsets$data[[1]] |>
mutate(
year = year(ymd(str_c(date, "01"))),
month = factor(month(ymd(str_c(date, "01")))),
rf = as.numeric(RF) / 100,
.keep = "none"
)
dax_monthly <- dax_monthly |>
left_join(risk_free_monthly, join_by(year, month)) |>
mutate(ret_excess = ret - rf)
dax_monthly
dax_monthly |>
group_by(month) |>
summarize(ret = mean(ret)) |>
ggplot(aes(x = month, y = ret, fill = ret > 0)) +
geom_col() +
scale_y_continuous(labels = percent) +
labs(
x = "Month", y = "Average DAX Return",
title = "Average monthly DAX returns between 1988 and 2023"
) +
theme(legend.position = "none")
dax_monthly |>
ggplot(aes(x = month, y = ret, group = month)) +
ggdist::stat_halfeye(
adjust = .5, width = .6, .width = 0, justification = -.3, point_colour = NA
) +
geom_boxplot(
width = .25, outlier.shape = NA
) +
stat_summary(
fun = mean, geom="point", color = "red", fill = "red"
) +
geom_point(
size = 1.5, alpha = .2, position = position_jitter(seed = 42, width = .1)
) +
geom_hline(aes(yintercept = 0), linetype = "dashed") +
labs(
x = "Month", y = "DAX Return",
title = "Raincloud plots of monthly DAX returns between 1988 and 2023",
subtitle = "Red dots indicate means"
)
dax_monthly |>
ggplot(aes(x = month, y = ret, group = month)) +
ggdist::stat_halfeye(
adjust = .5, width = .6, .width = 0, justification = -.3, point_colour = NA
) +
geom_boxplot(
width = .25, outlier.shape = NA
) +
stat_summary(
fun = mean, geom="point", color = "red", fill = "red"
) +
geom_point(
size = 1.5, alpha = .2, position = position_jitter(seed = 42, width = .1)
) +
geom_hline(aes(yintercept = 0), linetype = "dashed") +
labs(
x = "Month", y = "DAX Return",
title = "Distributions of monthly DAX returns between 1988 and 2023",
subtitle = "Red dots indicate means, solid lines indicate medians"
)
dax_monthly |>
drop_na(ret_excess) |>
group_by(Month = month) |>
summarize(
Mean = mean(ret_excess),
SD = sd(ret_excess),
Q05 = quantile(ret_excess, 0.05),
Q95 = quantile(ret_excess, 0.95),
`t-Statistic` = sqrt(n()) * mean(ret_excess) / sd(ret_excess)
)
model_monthly <- lm(ret_excess ~ month, data = dax_monthly)
summary(model_monthly, robust = TRUE)
lm(ret_excess ~ month,
data = dax_monthly |>
filter(ret_excess >= quantile(ret_excess, 0.01) &
ret_excess <= quantile(ret_excess, 0.99))
)
dax_monthly
dax_monthly
View(dax_monthly)
dax_monthly <- dax |>
mutate(year = year(date),
month = factor(month(date))) |>
group_by(year, month) |>
filter(date == max(date)) |>
ungroup() |>
arrange(date) |>
mutate(ret = price / lag(price) - 1) |>
drop_na()
#| message: false
factors_ff3_monthly_raw <- download_french_data("Fama/French 3 Factors")
risk_free_monthly <- factors_ff3_monthly_raw$subsets$data[[1]] |>
mutate(
year = year(ymd(str_c(date, "01"))),
month = factor(month(ymd(str_c(date, "01")))),
rf = as.numeric(RF) / 100,
.keep = "none"
)
dax_monthly <- dax_monthly |>
left_join(risk_free_monthly, join_by(year, month)) |>
mutate(ret_excess = ret - rf) |>
drop_na()
lm(ret_excess ~ month,
data = dax_monthly |>
filter(ret_excess >= quantile(ret_excess, 0.01) &
ret_excess <= quantile(ret_excess, 0.99))
)
model_monthly_winsorized <- lm(ret_excess ~ month,
data = dax_monthly |>
filter(ret_excess >= quantile(ret_excess, 0.01) &
ret_excess <= quantile(ret_excess, 0.99))
)
summary(model_monthly_winsorized, robust = TRUE)
halloween_months <- c(11, 12, 1, 2, 3, 4)
halloween_months <- c(11, 12, 1, 2, 3, 4)
seasonality_months <- c(10, 11, 12, 1, 2, 3, 4, 5, 6)
dax_monthly <- dax_monthly |>
mutate(halloween = if_else(month %in% halloween_months, 1L, 0L),
seasonality = if_else(month %in% seasonality_months, 1L, 0L))
model_halloween <- lm(ret_excess ~ halloween, data = dax_monthly)
model_halloween
summary(model_halloween, robust = TRUE)
model_halloween <- lm(ret_excess ~ halloween, data = dax_monthly)
summary(model_halloween, robust = TRUE)
summary(model_monthly_winsorized, robust = TRUE)
library(fixest)
model_monthly <- feols(ret_excess ~ month, data = dax_monthly)
summary(model_monthly, robust = TRUE)
?feols
model_monthly <- feols(
ret_excess ~ month,
data = dax_monthly,
vcov = "hetero"
)
summary(model_monthly)
model_monthly_winsorized <- feols(
ret_excess ~ month,
data = dax_monthly |>
filter(ret_excess >= quantile(ret_excess, 0.01) &
ret_excess <= quantile(ret_excess, 0.99)),
vcov = "hetero"
)
summary(model_monthly_winsorized, robust = TRUE)
summary(model_monthly_winsorized)
etable(model_monthly, model_monthly_winsorized)
?etable
etable(model_monthly, model_monthly_winsorized, coefstat = "tstat")
model_halloween <- feols(
ret_excess ~ halloween,
data = dax_monthly,
vcov = "hetero"
)
model_halloween_winsorized <- feols(
ret_excess ~ halloween,
data = dax_monthly |>
filter(ret_excess >= quantile(ret_excess, 0.01) &
ret_excess <= quantile(ret_excess, 0.99)),
vcov = "hetero"
)
etable(model_halloween, model_halloween_winsorized, coefstat = "tstat")
dax_monthly <- dax_monthly |>
mutate(
ret_excess_halloween = if_else(halloween == 1, ret, rf),
ret_excess_halloween_short = if_else(halloween == 1, ret, -ret)
)
sharpe_ratio <- function(x) {
sqrt(12) *  mean(x) / sd(x)
}
dax_monthly |>
drop_na() |>
arrange(date) |>
summarize(`Buy and Hold` = sharpe_ratio(ret_excess),
`Halloween` = sharpe_ratio(ret_excess_halloween),
`Halloween-Short` = sharpe_ratio(ret_excess_halloween_short))
dax_monthly |>
drop_na() |>
summarize(`Buy and Hold` = sharpe_ratio(ret_excess),
`Halloween` = sharpe_ratio(ret_excess_halloween),
`Halloween-Short` = sharpe_ratio(ret_excess_halloween_short))
dax_monthly |>
summarize(`Buy and Hold` = sharpe_ratio(ret_excess),
`Halloween` = sharpe_ratio(ret_excess_halloween),
`Halloween-Short` = sharpe_ratio(ret_excess_halloween_short))
dax_monthly |>
summarize(
`Buy and Hold` = sharpe_ratio(ret_excess),
`Halloween` = sharpe_ratio(ret_excess_halloween),
`Halloween-Short` = sharpe_ratio(ret_excess_halloween_short)
)
dax_monthly
dax_monthly |>
filter(ret_excess >= ret_excess_q01 &
ret_excess <= ret_excess_q99)
ret_excess_q01 <- quantile(dax_monthly$ret_excess, 0.01)
ret_excess_q99 <- quantile(ret_excess, 0.99)
dax_monthly |>
filter(ret_excess >= ret_excess_q01 &
ret_excess <= ret_excess_q99)
ret_excess_q99 <- quantile(dax_monthly$ret_excess, 0.99)
dax_monthly |>
filter(ret_excess >= ret_excess_q01 &
ret_excess <= ret_excess_q99)
dax_monthly
model_halloween_trimmed <- feols(
ret_excess ~ halloween,
data = dax_monthly |>
filter(ret_excess >= ret_excess_q01 & ret_excess <= ret_excess_q99),
vcov = "hetero"
)
etable(model_halloween, model_halloween_trimmed, coefstat = "tstat")
bind_rows(
dax_monthly |>
summarize(
`Buy and Hold` = sharpe_ratio(ret_excess),
`Halloween` = sharpe_ratio(ret_excess_halloween),
`Halloween-Short` = sharpe_ratio(ret_excess_halloween_short)
),
dax_monthly |>
filter(ret_excess >= ret_excess_q01 & ret_excess <= ret_excess_q99) |>
summarize(
`Buy and Hold` = sharpe_ratio(ret_excess),
`Halloween` = sharpe_ratio(ret_excess_halloween),
`Halloween-Short` = sharpe_ratio(ret_excess_halloween_short)
)
)
dax_monthly |>
filter(ret_excess >= ret_excess_q01 & ret_excess <= ret_excess_q99)
bind_rows(
dax_monthly |>
summarize(
`Buy and Hold` = sharpe_ratio(ret_excess),
`Halloween` = sharpe_ratio(ret_excess_halloween),
`Halloween-Short` = sharpe_ratio(ret_excess_halloween_short)
) |>
mutate(Data = "Full"),
dax_monthly |>
filter(ret_excess >= ret_excess_q01 & ret_excess <= ret_excess_q99) |>
summarize(
`Buy and Hold` = sharpe_ratio(ret_excess),
`Halloween` = sharpe_ratio(ret_excess_halloween),
`Halloween-Short` = sharpe_ratio(ret_excess_halloween_short)
) |>
mutate(Data = "Winsorized")
)
bind_rows(
dax_monthly |>
summarize(
`Buy and Hold` = sharpe_ratio(ret_excess),
`Halloween` = sharpe_ratio(ret_excess_halloween),
`Halloween-Short` = sharpe_ratio(ret_excess_halloween_short)
) |>
mutate(Data = "Full"),
dax_monthly |>
filter(ret_excess >= ret_excess_q01 & ret_excess <= ret_excess_q99) |>
summarize(
`Buy and Hold` = sharpe_ratio(ret_excess),
`Halloween` = sharpe_ratio(ret_excess_halloween),
`Halloween-Short` = sharpe_ratio(ret_excess_halloween_short)
) |>
mutate(Data = "Winsorized")
) |>
select(Data, everything())
dax_monthly <- dax_monthly |>
mutate(
ret_excess_halloween = if_else(halloween == 1, ret_excess, 0),
ret_excess_halloween_short = if_else(halloween == 1, ret_excess, -ret_excess)
)
sharpe_ratio <- function(x) {
sqrt(12) *  mean(x) / sd(x)
}
bind_rows(
dax_monthly |>
summarize(
`Buy and Hold` = sharpe_ratio(ret),
`Halloween` = sharpe_ratio(ret_excess_halloween),
`Halloween-Short` = sharpe_ratio(ret_excess_halloween_short)
) |>
mutate(Data = "Full"),
dax_monthly |>
filter(ret_excess >= ret_excess_q01 & ret_excess <= ret_excess_q99) |>
summarize(
`Buy and Hold` = sharpe_ratio(ret_excess),
`Halloween` = sharpe_ratio(ret_excess_halloween),
`Halloween-Short` = sharpe_ratio(ret_excess_halloween_short)
) |>
mutate(Data = "Trimmed")
) |>
select(Data, everything())
