{
  "hash": "97818eb0112cca4b39716ae667d80a00",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Clustering Binary Data\"\ndescription: \"An application of different unsupervised learning approaches to cluster simulated survey responses using R\"\nauthor: \"Christoph Scheuch\"\ndate: \"2023-11-25\" \nimage: thumbnail.png\ncategories: \n  - R\n  - Unsupervised Learning\n---\n\n\nIn this post, I tackle the challenge to extract a small number of typical respondent profiles from a large scale survey with multiple yes-no questions. This type of setting corresponds to a classification problem without knowing the true labels of the observations â€“ also known as unsupervised learning. \n\nTechnically speaking, we have a set of $N$ observations $(x_1, x_2, ... , x_N)$ of a random $p$-vector $X$ with joint density $\\text{Pr}(X)$. The goal of classification is to directly infer the properties of this probability density without the help of the correct answers (or degree-of-error) for each observation. In this note, we focus on cluster analysis that attempts to find convex regions of the $X$-space that contain modes of $\\text{Pr}(X)$. This approach aims to tell whether $\\text{Pr}(X)$ can be represented by a mixture of simpler densities representing distinct classes of observations.\n\nIntuitively, we want to find clusters of the survey responses such that respondents within each cluster are more closely related to one another than respondents assigned to different clusters. There are many possible ways to achieve that, but we focus on the most popular and most approachable ones: $K$-means, $K$-modes, as well as agglomerative and divisive hierarchical clustering. As we see below, the 4 models yield quite different results for clustering binary data.\n\nWe use the following packages throughout this post. In particular, we use `klaR` and `cluster` for clustering algorithms that go beyond the `stats` package that is included with your R installation.[^1]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(klaR)\nlibrary(cluster)\n```\n:::\n\n\nNote that there  will be an annoying namespace conflict between `MASS::select()` and `dplyr::select()`). We use the `conflicted` package to explicitly resolve these conflicts. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(conflicted)\n\nconflicts_prefer(\n  dplyr::filter,\n  dplyr::lag,\n  dplyr::select\n)\n```\n:::\n\n\n\n## Creating sample data\n\nLet us start by creating some sample data where we basically exactly know which kind of answer profiles are out there. Later, we evaluate the cluster models according to how well they are doing in uncovering the clusters and assigning respondents to clusters. We assume that there are 4 yes/no questions labeled q1, q2, q3 and q4. In addition, there are 3 different answer profiles where cluster 1 answers positively to the first question only, cluster 2 answers positively to question 2 and 3 and cluster 3 answers all questions positively. We also define the the number of respondents for each cluster.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncenters <- tibble(\n  cluster = factor(1:3), \n  respondents = c(250, 500, 200),\n  q1 = c(1, 0, 1),\n  q2 = c(0, 1, 1),             \n  q3 = c(0, 1, 1),\n  q4 = c(0, 0, 1)\n)\n```\n:::\n\n\nAlternatively, we could think of the yes/no questions as medical records that indicate whether the subject has a certain pre-condition or not.\n\nSince it should be a bit tricky for the clustering models to find the actual response profiles, let us add some noise in the form of respondents that deviate from their assigned cluster profile and shuffle all rows. We find out below how the cluster algorithms are able to deal with this noise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nlabelled_respondents <- centers |> \n  mutate(\n    across(\n      starts_with(\"q\"),\n      ~map2(respondents, .x, function(x, y) {\n        rbinom(x, 1, max((y - 0.1), 0.1))\n      }),\n      .names = \"{col}\"\n    )\n  ) |> \n  select(-respondents) |> \n  unnest(cols = c(q1, q2, q3, q4)) |> \n  sample_n(n())\n```\n:::\n\n\nThe figure below visualizes the distribution of simulated question responses by cluster.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlabelled_respondents |>\n  pivot_longer(cols = -cluster, \n               names_to = \"question\", values_to = \"response\") |>\n  mutate(response = response == 1) |>\n  ggplot(aes(x = response, y = question, color = cluster)) +\n  geom_jitter() +\n  theme_bw() +\n  labs(x = \"Response\", y = \"Question\", color = \"Cluster\",\n       title = \"Visualization of simulated question responses by cluster\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-alt='Visualization of simulated question responses by cluster.' width=2100}\n:::\n:::\n\n\n## $K$-means clustering\n\nThe $K$-means algorithm is one of the most popular clustering methods (see also this tidymodels example). It is intended for situations in which all variables are of the quantitative type since it partitions all respondents into $k$ groups such that the sum of squares from respondents to the assigned cluster centers are minimized. For binary data, the Euclidean distance reduces to counting the number of variables on which two cases disagree.\n\nThis leads to a problem (which is also described here) because of an arbitrary cluster assignment after cluster initialization. The first chosen clusters are still binary data and hence observations have integer distances from each of the centers. The corresponding ties are hard to overcome in any meaningful way. Afterwards, the algorithm computes means in clusters and revisits assignments. Nonetheless, $K$-means might produce informative results in a fast and easy to interpret way. We hence include it in this post for comparison.\n\nTo run the $K$-means algorithm, we first drop the cluster column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrespondents <- labelled_respondents |>\n  select(-cluster)\n```\n:::\n\n\nIt is very straight-forward to run the built-in `stats::kmeans` clustering algorithm. We choose the parameter of maximum iterations to be 1000 to increase the likeliness of getting the best fitting clusters. Since the data is fairly small and the algorithm is also quite fast, we see no harm in using a high number of iterations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\niter_max <- 1000\nkmeans_example <- stats::kmeans(respondents, centers = 3, iter.max = iter_max)\n```\n:::\n\n\nThe output of the algorithm is a list with different types of information including the assigned clusters for each respondent.\n\nAs we want to compare cluster assignment across different models and we repeatedly assign different clusters to respondents, we write up a helper function that adds assignments to the respondent data from above. The function shows that $K$-means and $K$-modes contain a field with cluster information. The two hierarchical cluster models, however, need to be cut a the desired number of clusters (more on that later).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassign_clusters <- function(model, k = NULL) {\n  if (class(model)[1] %in% c(\"kmeans\", \"kmodes\")) {\n    cluster_assignment <- model$cluster\n  }\n  if (class(model)[1] %in% c(\"agnes\", \"diana\")) {\n    if (is.null(k)) {\n      stop(\"k required for hierarchical models!\")\n    }\n    cluster_assignment <- stats::cutree(model, k = k)\n  }\n  \n  clusters <- respondents |>\n    mutate(cluster = cluster_assignment)\n  \n  return(clusters)\n}\n```\n:::\n\n\nIn addition, we introduce a helper function that summarizes information by cluster. In particular, the function computes average survey responses (which correspond to proportion of yes answers in the current setting) and sorts the clusters according to the total number of positive answers. The latter helps us later to compare clusters across different models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize_clusters <- function(model, k = NULL) {\n\n  clusters <- assign_clusters(model = model, k = k)\n  \n  summary_statistics <- clusters |>\n    group_by(cluster) |>\n    summarize(across(matches(\"q\"), \\(x) mean(x, na.rm = TRUE)),\n              assigned_respondents = n()) |>\n    select(-cluster) |>\n    mutate(total = rowSums(across(matches(\"q\")))) |>\n    arrange(-total) |>\n    mutate(k = row_number(),\n           model = class(model)[1])\n  \n  return(summary_statistics)\n}\n```\n:::\n\n\nWe could easily introduce other summary statistics into the function, but the current specification is sufficient for the purpose of this note.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkmeans_example <- summarize_clusters(kmeans_example)\n```\n:::\n\n\nSince we do not know the true number of clusters in real-world settings, we want to compare the performance of clustering models for different numbers of clusters. Since we know that the true number of clusters is 3 in the current setting, let us stick to a maximum of 7 clusters. In practice, you might of course choose an arbitrary maximum number of clusters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk_min <- 1\nk_max <- 7\n\nkmeans_results <- tibble(k = k_min:k_max) |>\n  mutate(\n    kclust = map(k, ~kmeans(respondents, centers = .x, iter.max = iter_max)),\n  )\n```\n:::\n\n\nA common heuristic to determine the optimal number of clusters is the elbow method where we plot the within-cluster sum of squared errors of an algorithm for increasing number of clusters. The optimal number of clusters corresponds to the point where adding another cluster does lead to much of an improvement anymore. In economic terms, we look for the point where the diminishing returns to an additional cluster are not worth the additional cost (assuming that we want the minimum number of clusters with optimal predictive power).\n\nThe function below computes the within-cluster sum of squares for any cluster assignments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_withinss <- function(model, k = NULL) {\n  \n  clusters <- assign_clusters(model = model, k = k)\n  \n  centers <- clusters |>\n    group_by(cluster) |>\n    summarize_all(mean) |>\n    pivot_longer(cols = -cluster, names_to = \"question\", values_to = \"cluster_mean\")\n  \n  withinss <- clusters |>\n    pivot_longer(cols = -cluster, names_to = \"question\", values_to = \"response\") |>\n    left_join(centers, by = c(\"cluster\", \"question\")) |>\n    summarize(k = max(cluster),\n              withinss = sum((response - cluster_mean)^2)) |>\n    mutate(model = class(model)[1])\n  \n  return(withinss)\n}\n```\n:::\n\n\nWe can simply map the function across our list of $K$-means models. For better comparability, we normalize the within-cluster sum of squares for any number of cluster by the benchmark case of only having a single cluster. Moreover, we consider log-differences to because we care more about the percentage decrease in sum of squares rather than the absolute number. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nkmeans_logwithindiss <- kmeans_results$kclust |>\n  map(compute_withinss) |>\n  reduce(bind_rows) |>\n  mutate(logwithindiss = log(withinss) - log(withinss[k == 1]))\n```\n:::\n\n\n## $K$-modes clustering\n\nSince $K$-means is actually not ideal for binary (or hierarchical data in general), Huang (1997) came up with the $K$-modes algorithm. This clustering approach aims to partition respondents into $K$ groups such that the distance from respondents to the assigned cluster modes is minimized. A mode is a vector of elements that minimize the dissimilarities between the vector and each object of the data. Rather than using the Euclidean distance, $K$-modes uses simple matching distance between respondents to quantify dissimilarity which translates into counting the number of mismatches in all question responses in the current setting.\n\nFortunately, the `klaR` package provides an implementation of the $K$-modes algorithm that we can apply just like the $K$-means above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkmodes_example <- klaR::kmodes(respondents, iter.max = iter_max, modes = 3) |>\n  summarize_clusters()\n```\n:::\n\n\nSimilarly, we just map the model across different numbers of target cluster modes and compute the within-cluster sum of squares.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkmodes_results <- tibble(k = k_min:k_max) |>\n  mutate(\n    kclust = map(k, ~klaR::kmodes(respondents, modes = ., iter.max = iter_max))\n  )\n\nkmodes_logwithindiss <- kmodes_results$kclust |>\n  map(compute_withinss) |>\n  reduce(bind_rows) |>\n  mutate(logwithindiss = log(withinss) - log(withinss[k == 1]))\n```\n:::\n\n\nNote that we computed the within-cluster sum of squared errors rather than using the within-cluster simple-matching distance provided by the function itself. The latter counts the number of differences from assigned respondents to their cluster modes.\n\n## Hierarchical clustering\n\nAs an alternative to computing optimal assignments for a given number of clusters, we might sometimes prefer to arrange the clusters into a natural hierarchy. This involves successively grouping the clusters themselves such that at each level of the hierarchy, clusters within the same group are more similar to each other than those in different groups. There are two fundamentally different approaches to hierarchical clustering that are fortunately implemented in the great `cluster` package.\n\nBoth hierarchical clustering approaches require a dissimilarity or distance matrix. Since we have binary data, we choose the asymmetric binary distance matrix based on the Jaccard distance. Intuitively, the Jaccard distance measures how far the overlap of responses between two groups is from perfect overlap.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndissimilarity_matrix <- stats::dist(respondents, method = \"binary\")\n```\n:::\n\n\nAgglomerative clustering start at the bottom and at each level recursively merge a selected pair of clusters into a single cluster. This produces a clustering at the next higher level with one less cluster. The pair chosen for merging consist of the two clusters with the smallest within-cluster dissimilarity. On an intuitive level, agglomerative clustering is hence better in discovering small clusters.\n\nThe `cluster` package provides the agnes algorithm (AGglomerative NESting) that can easily applied to the dissimilarity matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nagnes_results <- cluster::agnes(\n  dissimilarity_matrix, diss = TRUE, keep.diss = TRUE, method = \"complete\"\n)\n```\n:::\n\n\nThe function returns a clustering tree that we could plot (which actually is rarely really helpful) or cut into different partitions using the `stats::cutree` function. This is why the helper functions from above need a number of target clusters as an input for hierarchical clustering models. However, the logic of the summary statistics are just as above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nagnes_example <- summarize_clusters(agnes_results, k = 3)\n\nagnes_logwithindiss <- k_min:k_max |>\n  map(~compute_withinss(agnes_results, .)) |>\n  reduce(bind_rows) |>\n  mutate(logwithindiss = log(withinss) - log(withinss[k == 1]))\n```\n:::\n\n\nDivisive methods start at the top and at each level recursively split one of the existing clusters at that level into two new clusters. The split is chosen such that two new groups with the largest between-group dissimilarity emerge. Intuitively speaking, divisive clustering is thus better in discovering large clusters.\n\nThe `cluster` package provides the diana algorithm (DIvise ANAlysis) for this clustering approach where the logic is basically the same as for the agnes model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiana_results <- cluster::diana(\n  dissimilarity_matrix, diss = TRUE, keep.diss = TRUE\n) \n\ndiana_example <- diana_results |>\n  summarize_clusters(k = 3)\n\ndiana_logwithindiss <-  k_min:k_max |>\n  map(~compute_withinss(diana_results, .)) |>\n  reduce(bind_rows) |>\n  mutate(logwithindiss = log(withinss) - log(withinss[k == 1]))\n```\n:::\n\n\n## Model comparison\n\nLet us start the model comparison by looking at the within cluster sum of squares for different numbers of clusters. The figure shows that the $K$-modes algorithm improves the fastest towards the true number of 3 clusters. The elbow method would suggest in this case to stick with 3 clusters for this algorithm. Similarly, for the $K$-means model. The hierarchical clustering models do not seem to support 3 clusters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_rows(kmeans_logwithindiss, kmodes_logwithindiss,\n          agnes_logwithindiss, diana_logwithindiss) |>\n  ggplot(aes(x = k, y = logwithindiss, color = model, linetype = model)) +\n  geom_line() +\n  scale_x_continuous(breaks = k_min:k_max) + \n  theme_minimal() +\n  labs(x = \"Number of Clusters\", y = bquote(log(W[k])-log(W[1])), \n       color = \"Model\", linetype = \"Model\",\n       title = \"Within cluster sum of squares relative to benchmark case of one cluster\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){fig-alt='Within cluster sum of squares relative to benchmark case of one cluster.' width=2100}\n:::\n:::\n\n\nNow, let us compare the proportion of positive responses within assigned clusters across models. Recall that we ranked clusters according to the total share of positive answers to ensure comparability. This approach is only possible in this type of setting where we can easily introduce such a ranking. The figure suggests that $K$-modes performs best for the current setting as it identifies the correct responses for each cluster.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_rows(\n  kmeans_example, kmodes_example,\n  agnes_example, diana_example) |>\n  select(-c(total, assigned_respondents)) |>\n  pivot_longer(cols = -c(k, model), \n               names_to = \"question\", values_to = \"response\") |>\n  mutate(cluster = paste0(\"Cluster \", k)) |>\n  ggplot(aes(x = response, y = question, fill = model)) +\n  geom_col(position = \"dodge\") +\n  facet_wrap(~cluster) +\n  theme_bw() +\n  scale_x_continuous(labels = scales::percent) + \n  geom_hline(yintercept = seq(1.5, length(unique(colnames(respondents))) - 0.5, 1),\n             colour = 'black') +\n  labs(x = \"Proportion of responses\", y = \"Question\", fill = \"Model\",\n       title = \"Proportion of positive responses within assigned clusters\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){fig-alt='Proportion of positive responses within assigned clusters.' width=2100}\n:::\n:::\n\n\nFinally, let us check how well each model assigns respondents to the true cluster which is obviously not possible in real unsupervised applications. The figure below shows the true number of respondents by cluster as a dashed box and the assigned respondents as bars. The figure shows that $K$-modes is the only model that is able to consistently assign respondents to their correct cluster.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_rows(\n  kmeans_example, kmodes_example,\n  agnes_example, diana_example) |>\n  mutate(cluster = paste0(\"Cluster \", k)) |>\n  select(model, cluster, assigned_respondents) |>\n  ggplot() +\n  geom_col(position = \"dodge\", \n           aes(y = assigned_respondents, x = cluster, fill = model)) +\n  geom_col(data = labelled_respondents |>\n             group_by(cluster = paste0(\"Cluster \", cluster)) |>\n             summarize(assigned_respondents = n(),\n                       model = \"actual\"),\n           aes(y = assigned_respondents, x = cluster), \n           fill = \"white\", color = \"black\", alpha = 0, linetype = \"dashed\") +\n  theme_bw() +\n  labs(x = NULL, y = \"Number of assigned respondents\", fill = \"Model\",\n       title = \"Number of assigned respondents by cluster\",\n       subtitle = \"Dashed box indicates true number of respondents by cluster\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){fig-alt='Number of assigned respondents by cluster.' width=2100}\n:::\n:::\n\n\nLet me end this post with a few words of caution: first, the ultimate outcome heavily depends on the seed chosen at the beginning of the post. The results might be quite different for other draws of respondents or initial conditions for clustering algorithms. Second, there are many more models out there that can be applied to the current setting. However, with this post I want to emphasize that it is important to consider different models at the same time and to compare them through a consistent set of measures. Ultimately, choosing the optimal number of clusters in practice requires a judgment call, but at least it can be informed as much as possible.\n\n[^1]: As of writing, the `tidyclust` package only has limited support for hierarchical clustering, so I decided to abstain from using it for this post. ",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}