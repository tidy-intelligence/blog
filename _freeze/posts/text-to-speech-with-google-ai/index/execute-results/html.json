{
  "hash": "efe2a569cd96f723e1fd292e200c21c7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Text-to-Speech with Goolge AI\"\ndescription: \"Creating an audio book using Google's Text-to-Speech API\"\nmetadata:\n  pagetitle: \"Rapid RAG Prototyping\"\nauthor: \"Christoph Scheuch\"\ndate: \"2025-02-24\" \nimage: thumbnail.png\nimage-alt: Created with DALL-E.\ncategories: \n  - Python\n  - Text-to-Speech AI\n---\n\n::: {#e009a780 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport time\nimport re\n\nfrom dotenv import load_dotenv\nfrom google.cloud import texttospeech\nfrom pydub import AudioSegment\n\nload_dotenv()\n```\n:::\n\n\n## Downlado Book from Project Gutenberg\n\n::: {#5e878226 .cell execution_count=2}\n``` {.python .cell-code}\nwith open(\"metamorphosis_chapter1.txt\", \"r\", encoding=\"utf-8\") as file:\n    text = file.read()\n\ntext[:500]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n'One morning, when Gregor Samsa woke from troubled dreams, he found\\nhimself transformed in his bed into a horrible vermin. He lay on his\\narmour-like back, and if he lifted his head a little he could see his\\nbrown belly, slightly domed and divided by arches into stiff sections.\\nThe bedding was hardly able to cover it and seemed ready to slide off\\nany moment. His many legs, pitifully thin compared with the size of the\\nrest of him, waved about helplessly as he looked.\\n\\n“What’s happened to me?” he th'\n```\n:::\n:::\n\n\n## Prepare Text\n\n::: {#3084501c .cell execution_count=3}\n``` {.python .cell-code}\ndef split_text_by_paragraphs(text: str, max_bytes: int = 2000) -> list[str]:\n    \"\"\"\n    Split the text into chunks based on paragraphs (empty lines) and ensure each chunk is within the byte limit.\n\n    Args:\n        text (str): The input text to split.\n        max_bytes (int): Maximum byte size for each chunk.\n\n    Returns:\n        list[str]: List of text chunks.\n    \"\"\"\n    paragraphs = text.split(\"\\n\\n\")\n    chunks = []\n    current_chunk = \"\"\n    current_bytes = 0\n\n    for paragraph in paragraphs:\n        paragraph_bytes = len(paragraph.encode(\"utf-8\"))\n        if current_bytes + paragraph_bytes + 1 > max_bytes:\n            chunks.append(current_chunk.strip())\n            current_chunk = paragraph\n            current_bytes = paragraph_bytes\n        else:\n            if current_chunk:\n                current_chunk += \"\\n\\n\" + paragraph\n            else:\n                current_chunk = paragraph\n            current_bytes += paragraph_bytes + 2 \n\n    if current_chunk:\n        chunks.append(current_chunk.strip())\n\n    return chunks\n```\n:::\n\n\n::: {#e9c81c4e .cell execution_count=4}\n``` {.python .cell-code}\nparagraphs = split_text_by_paragraphs(text)\nlen(paragraphs)\nparagraphs[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n'One morning, when Gregor Samsa woke from troubled dreams, he found\\nhimself transformed in his bed into a horrible vermin. He lay on his\\narmour-like back, and if he lifted his head a little he could see his\\nbrown belly, slightly domed and divided by arches into stiff sections.\\nThe bedding was hardly able to cover it and seemed ready to slide off\\nany moment. His many legs, pitifully thin compared with the size of the\\nrest of him, waved about helplessly as he looked.\\n\\n“What’s happened to me?” he thought. It wasn’t a dream. His room, a\\nproper human room although a little too small, lay peacefully between\\nits four familiar walls. A collection of textile samples lay spread out\\non the table—Samsa was a travelling salesman—and above it there hung a\\npicture that he had recently cut out of an illustrated magazine and\\nhoused in a nice, gilded frame. It showed a lady fitted out with a fur\\nhat and fur boa who sat upright, raising a heavy fur muff that covered\\nthe whole of her lower arm towards the viewer.\\n\\nGregor then turned to look out the window at the dull weather. Drops of\\nrain could be heard hitting the pane, which made him feel quite sad.\\n“How about if I sleep a little bit longer and forget all this\\nnonsense”, he thought, but that was something he was unable to do\\nbecause he was used to sleeping on his right, and in his present state\\ncouldn’t get into that position. However hard he threw himself onto his\\nright, he always rolled back to where he was. He must have tried it a\\nhundred times, shut his eyes so that he wouldn’t have to look at the\\nfloundering legs, and only stopped when he began to feel a mild, dull\\npain there that he had never felt before.'\n```\n:::\n:::\n\n\n::: {#5ffe38f6 .cell execution_count=5}\n``` {.python .cell-code}\ndef clean_chunk(chunk):\n    cleaned_chunk = re.sub(r'(?<!\\n)\\n(?!\\n)', ' ', chunk) \n    cleaned_chunk = re.sub(r'\\n{2,}', '. ', cleaned_chunk)\n    cleaned_chunk = cleaned_chunk.replace(\"..\", \".\").replace(\"»\", \"\").replace(\"«\", \"\")\n    cleaned_chunk = re.sub(r'\\s-\\s+', '', cleaned_chunk)\n    cleaned_chunk = re.sub(r'\\([^)]*\\)', '', cleaned_chunk).strip()\n    cleaned_chunk = cleaned_chunk.replace(\"\\u2028\", \" \")\n    cleaned_chunk = re.sub(r'[\\x00-\\x1F\\x7F-\\x9F]', ' ', cleaned_chunk)\n\n    return cleaned_chunk\n\nclean_chunk(paragraphs[0])\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n'One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches into stiff sections. The bedding was hardly able to cover it and seemed ready to slide off any moment. His many legs, pitifully thin compared with the size of the rest of him, waved about helplessly as he looked. “What’s happened to me?” he thought. It wasn’t a dream. His room, a proper human room although a little too small, lay peacefully between its four familiar walls. A collection of textile samples lay spread out on the table—Samsa was a travelling salesman—and above it there hung a picture that he had recently cut out of an illustrated magazine and housed in a nice, gilded frame. It showed a lady fitted out with a fur hat and fur boa who sat upright, raising a heavy fur muff that covered the whole of her lower arm towards the viewer. Gregor then turned to look out the window at the dull weather. Drops of rain could be heard hitting the pane, which made him feel quite sad. “How about if I sleep a little bit longer and forget all this nonsense”, he thought, but that was something he was unable to do because he was used to sleeping on his right, and in his present state couldn’t get into that position. However hard he threw himself onto his right, he always rolled back to where he was. He must have tried it a hundred times, shut his eyes so that he wouldn’t have to look at the floundering legs, and only stopped when he began to feel a mild, dull pain there that he had never felt before.'\n```\n:::\n:::\n\n\n## Convert Text to Speech\n\n::: {#ba111171 .cell execution_count=6}\n``` {.python .cell-code}\ndef text_to_speech(\n    text: str, \n    output_file: str, \n    model: str = \"en-US-Studio-Q\",\n    pitch: float = -20,\n    speaking_rate: float = 0.8,\n    max_retries: int = 5, \n    base_delay: float = 1.0\n):\n    \"\"\"\n    Convert text to speech and save the output as an MP3 file, with exponential backoff for retries.\n    \n    Args:\n        text (str): The text to convert to speech.\n        output_file (str): The path to save the output MP3 file.\n        max_retries (int): Maximum number of retries on failure.\n        base_delay (float): Base delay in seconds for exponential backoff.\n    \"\"\"\n    client = texttospeech.TextToSpeechClient()\n\n    synthesis_input = texttospeech.SynthesisInput(text=text)\n\n    voice = texttospeech.VoiceSelectionParams(\n        language_code=model[:5],\n        name=model\n    )\n\n    audio_config = texttospeech.AudioConfig(\n        audio_encoding=texttospeech.AudioEncoding.MP3,\n        pitch=pitch,\n        speaking_rate=speaking_rate\n    )\n\n    retries = 0\n    while retries < max_retries:\n        try:\n            response = client.synthesize_speech(\n                input=synthesis_input,\n                voice=voice,\n                audio_config=audio_config\n            )\n            with open(output_file, \"wb\") as out:\n                out.write(response.audio_content)\n                print(f\"Audio content written to file: {output_file}\")\n            return\n        except Exception as e:\n            if hasattr(e, 'code') and e.code == 500:\n                retries += 1\n                delay = base_delay * (2 ** (retries - 1))\n                print(f\"Error 500: Retrying in {delay:.2f} seconds... (Attempt {retries}/{max_retries})\")\n                time.sleep(delay)\n            else:\n                print(f\"Non-retryable error: {e}\")\n                raise\n\n    print(f\"Failed to process text after {max_retries} retries.\")\n    raise RuntimeError(\"Max retries reached.\")\n```\n:::\n\n\n::: {#34c038cd .cell execution_count=7}\n``` {.python .cell-code}\ntext_to_speech(paragraphs[0], \"out/part1.mp3\")\n```\n:::\n\n\n## Process Text \n\n::: {#ad2622c3 .cell execution_count=8}\n``` {.python .cell-code}\ndef process_text(text: list, output_folder: str):\n    \"\"\"\n    Process a text, split it into chunks, and generate MP3 files in the output folder.\n\n    Args:\n        text (str): A list of file paths to text files.\n        output_folder (str): The folder to save the generated MP3 files.\n    \"\"\"\n    if not os.path.exists(output_folder):\n        os.makedirs(output_folder)\n\n    text_chunks = split_text_by_paragraphs(text)\n\n    for i, chunk in enumerate(text_chunks):\n        output_file_name = f\"part{i+1}.mp3\"\n        output_file_path = os.path.join(output_folder, output_file_name)\n                \n        cleaned_chunk = clean_chunk(chunk)\n\n        text_to_speech(cleaned_chunk, output_file_path)\n        time.sleep(1)\n```\n:::\n\n\n::: {#87282c4c .cell execution_count=9}\n``` {.python .cell-code}\nprocess_text(text, \"out\")\n```\n:::\n\n\n## Combine Individual Segments\n\nNote that you might have to run `pip install audioop-lts` to \n\n::: {#e3081ee5 .cell execution_count=10}\n``` {.python .cell-code}\ninput_dir = \"out\"\noutput_dir = \"out\"\n\ndef get_number(filename):\n    return int(filename.replace('part', '').replace('.mp3', ''))\n\nmp3_files = sorted(\n    [file for file in os.listdir(input_dir) if file.endswith(\".mp3\")],\n    key=get_number\n)\n\ncombined_audio = None\nfor file in mp3_files:\n    audio = AudioSegment.from_file(os.path.join(input_dir, file))\n    combined_audio = audio if combined_audio is None else combined_audio + audio\ncombined_audio.export(\"out/chapter1.mp3\", format=\"mp3\", bitrate=\"320k\")\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}