{
  "hash": "481daafd6a352ec3284f897dfe2dbb6f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidy Data Visualization: ggplot2 vs seaborn\"\ndescription: \"A comparison of two popular data visualization tools for R and Python\"\nmetadata:\n  pagetitle: \"Tidy Data Visualization: ggplot2 vs seaborn\"\nauthor: \"Christoph Scheuch\"\ndate: \"2024-01-16\" \nimage: thumbnail.png\nimage-alt: A bright and friendly office setting with two equally sized screens placed centrally on a desk. Each screen displays a simple line chart without any text or numbers. The desk is placed directly on a beach, with no walls or windows, allowing an unobstructed view of the sea and some seagulls in the background. The scene conveys a peaceful and productive atmosphere, with natural beach scenery surrounding the workspace. Created with DALL-E 3.\ncategories: \n  - R\n  - Python\n  - Visualization\n---\n\n\n`ggplot2` is based on Leland Wilkinson\"s Grammar of Graphics, a set of principles for creating consistent and effective statistical graphics, and was developed by Hadley Wickham. The package is a cornerstone of the R community and integrates seamlessly with other `tidyverse` packages. One of the key strengths of `ggplot2` is its use of a consistent syntax, making it relatively easy to learn and enabling users to create a wide range of graphics with a common set of functions. The package is also highly customizable, allowing detailed adjustments to almost every element of a plot.\n\n`seaborn` is a Python data visualization library based on `matplotlib`. It provides a high-level interface for drawing attractive and informative statistical graphics. Key features of `seaborn` include its ability to work well with `pandas` data frames, built-in themes for styling `matplotlib` graphics, and functions for visualizing distributions. \n\nThe types of plots that I chose for the comparison heavily draw on the examples given in [R for Data Science](https://r4ds.hadley.nz/data-visualize) - an amazing resource if you want to get started with data visualization. \n\n## Loading packages and data\n\nWe start by loading the main packages of interest and the popular `penguins` data that comes with `seaborn` and exists as an R package. We then use the `penguins` data frame as the data to compare all functions and methods below. Note that I drop all rows with missing values because I don't want to get into related messages in this post. \n\n::: {.panel-tabset}\n### ggplot2\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\npenguins <- na.omit(palmerpenguins::penguins)\n```\n:::\n\n### seaborn\n\n::: {.cell}\n\n```{.python .cell-code}\nimport seaborn as sns\n\npenguins = sns.load_dataset(\"penguins\")\n\nsns.set_theme(style = \"whitegrid\")\n```\n:::\n\n::: \n\n## A full-blown example\n\nLet\"s start with an advancved example that combines many different aesthetics at the same time: we plot two columns against each other, use color and shape aesthetics do differentiate species, include separate regression lines for each species, manually set nice labels, and use a theme. As you can see in this example already, `ggplot2` and `seaborn` have a fundamentally different syntactic approach. While `ggplot2` works with layers, `seaborn` uses a specific function with a few parameter and additional methods. \n\n::: {.panel-tabset}\n### ggplot2\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = bill_length_mm, y = bill_depth_mm, \n           color = species, shape = species)) + \n  geom_point(size = 2) + \n  geom_smooth(method = \"lm\", formula = \"y ~ x\") +\n  labs(x = \"Bill length (mm)\", y = \"Bill width (mm)\", \n       title = \"Bill length vs. bill width\", \n       subtitle = \"Using geom_point and geom_smooth of the ggplot2 package\",\n       color = \"Species\", shape = \"Species\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=2100}\n:::\n:::\n\n### seaborn \n\n::: {.cell}\n\n```{.python .cell-code}\n(sns.lmplot(\n    data = penguins,\n    x = \"bill_length_mm\", y = \"bill_depth_mm\", \n    hue = \"species\", markers = [\"o\", \"s\", \"^\"], fit_reg = True, \n    scatter_kws = {\"s\": 50}, legend = False\n  )\n  .set_axis_labels(\"Bill length (mm)\", \"Bill width (mm)\")\n  .add_legend(title = \"Species\")\n  .fig.suptitle(\"Bill length vs. bill width\", y = 1)\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=595}\n:::\n:::\n\n::: \n\n## Visualizing distributions\n\n### A categorical variable\n\nLet's break down the differences in smaller steps by focusing on simpler examples. If you have a categorical variable and want to compare its relevance in your data, then `ggplot2::geom_bar()` and `seaborn.countplot()` are your friends. I manually specify the order in the `seaborn` figure to mimic the automatic behavior of `ggplot2`.\n\n::: {.panel-tabset}\n### ggplot2\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = island)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-3.png){width=2100}\n:::\n:::\n\n### seaborn\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.countplot(\n  data = penguins, \n  x = \"island\",\n  order = sorted(penguins[\"island\"].unique())\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: \n\n### A numerical variable\n\nIf you have a numerical variable, usually histograms are a good starting point to get a better feeling for the distribution of your data. `ggplot2::geom_histogram()` and `seaborn.histplot` with options to control bin widths or number of bins are the functions for this task.\n\n::: {.panel-tabset}\n### ggplot2\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = bill_length_mm)) +\n  geom_histogram(binwidth = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-3.png){width=2100}\n:::\n:::\n\n### seaborn\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.histplot(\n  data = penguins, \n  x = \"bill_length_mm\", \n  binwidth = 2\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: \n\nBoth packages also support density curves, but I personally wouldn\"t recommend to start with densities because they are estimated curves that might obscure underlying data features. However, we look at densities in the next section. \n\n## Visualizing relationships\n\n### A numerical and a categorical variable\n\nTo visualize relationships, you need to have at least two columns. If you have a numerical and a categorical variable, then histograms or densities with groups are a good starting point. The next example illustrates the use of density curves via `ggplot2::geom_density()` and `seaborn.kdeplot()` with similar options to control the appearance.\n\n::: {.panel-tabset}\n### ggplot2\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = body_mass_g, color = species, fill = species)) +\n  geom_density(linewidth = 0.75, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-3.png){width=2100}\n:::\n:::\n\n### seaborn\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.kdeplot(\n  data = penguins, \n  x = \"body_mass_g\", \n  hue = \"species\", \n  fill = True, common_norm = False, alpha = 0.5, linewidth = 0.75\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n:::\n\n### Two categorical columns\n\nStacked bar plots are a good way to display the relationship between two categorical columns. `geom_bar()` with the `position` argument and `seaborn.histplot()` with `stat` are your aesthetics of choice for this task. Note that you can easily switch to counts by using `position = \"identity\"` and `stat = \"count\"`, respectively, instead of relative frequencies as in the example below. Note that I use `shrink = 0.8` to get some spacing between columns in the `seaborn` plot.\n\n::: {.panel-tabset}\n### ggplot2\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = species, fill = island)) +\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-3.png){width=2100}\n:::\n:::\n\n### seaborn\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.histplot(\n  data = penguins, \n  x = \"species\", \n  hue = \"island\", multiple = \"fill\", stat = \"percent\", shrink = 0.8\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: \n\n### Two numerical columns\n\nScatter plots and regression lines are definitely the most common approach for visualizing the relationship between two numerical columns and we focus on scatter plots for this example (see the first visualization example if you want to see again how to add a regression line). Here, the `size` parameter controls the size of the shapes that you use for the data points in `ggplot2::geom_point()` relative to the base size (i.e., it is not tied to any unit of measurement like pixels). For `seaborn.scatterplot()` you have the `s` parameter to control point sizes manually, where size is typically given in squared points (where a point is a unit of measure in typography, equal to 1/72 of an inch). \n\n::: {.panel-tabset}\n### ggplot2\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = bill_length_mm, y = flipper_length_mm)) +\n  geom_point(size = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-3.png){width=2100}\n:::\n:::\n\n### seaborn\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.scatterplot(\n  data = penguins, \n  x = \"bill_length_mm\", y = \"flipper_length_mm\", \n  s = 50\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: \n\n### Three or more columns\n\nYou can include more information by mapping columns to additional aesthetics. For instance, we can map colors and shapes to species and create separate plots for each island by using facets. Facets are actually a great way to extend your figures, so I highly recommend playing around with them using your own data. \n\nIn `ggplot2` you add the facet layer at the end, whereas in `seaborn` you have to start with the facet grid at the beginning and map scatter plots across facets. Note that I use variable assignment to `penguins_facet` in order to prevent `seaborn` from printing the figure twice while rendering this post (no idea why though).\n\n::: {.panel-tabset}\n### ggplot2\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = bill_length_mm, y = flipper_length_mm)) +\n  geom_point(aes(color = species, shape = species)) +\n  facet_wrap(~island)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-3.png){width=2100}\n:::\n:::\n\n### seaborn\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins_facet = (sns.FacetGrid(\n    data = penguins, col=\"island\", col_order = sorted(penguins[\"island\"].unique()),\n    hue=\"species\", margin_titles = True\n  )\n  .map(sns.scatterplot, \"bill_length_mm\", \"flipper_length_mm\", alpha = 0.7)\n  .add_legend()\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=979}\n:::\n:::\n\n::: \n\n## Saving plots\n\nAs a final comparison, let us look at saving plots. `ggplot2::ggsave()` provides the most important options as function paramters. In `seaborn`, you have to, for instance, tweak the figure size before can save the figure.  \n\n::: {.panel-tabset}\n### ggplot2\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_figure <- penguins |> \n  ggplot(aes(x = bill_length_mm, y = flipper_length_mm)) + \n  geom_point()\n\nggsave(penguins_figure, filename = \"penguins-figure.png\",\n       width = 7, height = 5, dpi = 300)\n```\n:::\n\n### seaborn\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins_figure = sns.scatterplot(\n  data = penguins, \n  x = \"bill_length_mm\", y = \"flipper_length_mm\"\n)\n\npenguins_figure.figure.set_size_inches(7, 5)\npenguins_figure.figure.savefig(\"penguins-figure.png\", dpi = 300)\n```\n:::\n\n::: \n\n## Conclusion\n\nIn terms of syntax, `ggplot2` and `seaborn` are considerably different. `ggplot2` follows the basic syntax of \n```markdown\nggplot(data = <DATA>, aes(x = <X-VAR>, y = <Y-VAR>)) +\n  geom_<PLOT-TYPE>() +\n  other_layers\n```\nand `seaborn` follows the syntax\n```markdown\nsns.<PLOT-FUNCTION>(data = <DATA>, x = \"<X-VAR>\", y = \"<Y-VAR>\", other_parameters).\n```\nI think this difference comes from different philosophies. `ggplot2` focuses on layering and mapping data to aesthetics, whereas `seaborn` is more about providing a variety of complex plot types easily. Moreover, `ggplot2` is designed to work considerably well with tidy data (see my [blog post on tidy data](../tidy-data-a-recipe-for-efficient-data-analysis/index.qmd)), while `seaborn` is more flexible with input data formats.\n\nBoth offer extensive customization options, but they are implemented differently. `ggplot2` uses additional layers and scales and hence allows for a large ecosystem (see, for instance, [this repo](https://github.com/erikgahner/awesome-ggplot2) for a collection of links), while `seaborn` relies on the customization options of `matplotlib` and its own parameters. I think both approaches are powerful and have their unique advantages, and the choice between them often depends on your programming language preference and specific requirements of the data visualization task.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}