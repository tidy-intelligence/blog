{
  "hash": "ec856514f43f330db746113ed804b4a1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Scraping ESG Data from Yahoo Finance\"\ndescription: \"How to scrape environmental, social and governance risk scores using R\"\nmetadata:\n  pagetitle: \"Tidy Data: A Recipe for Efficient Data Analysis\"\nauthor: \"Christoph Scheuch\"\ndate: \"2023-11-27\" \nimage: thumbnail.png\n---\n\n\nIn this post, I provide a simple approach to scrape Environmental, Social and Governance (ESG) information from Yahoo Finance (e.g., Apple) using the programming language R. Yahoo Finance provides total ESG scores, environment, social and governance risk scores, as well as controversy levels, all compiled by Sustainalytics (which is by now owned by Morningstar). My code builds on the [walk-through by Kyle Ruden](https://www.kylerudden.com/blog/scraping-esg-scores/), which I adapted to the current page structure of Yahoo Finance and my own coding style. In addition, I added a few steps that I, as web scraping newbie, had to look up while going through his guide.\n\nTo begin with, I want to urge you to read at least the legal and ethical considerations put forward by Kyle. Most importantly, I want to mention that, when performing web scraping tasks, it is both good practice and often required to set a custom user agent request header to identify yourself, as well as sending requests at a modest rate to ‘smell like a human’. I consider both of these key aspects in my code below.\n\nThroughout this post, I rely on the following packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # overall grammar\nlibrary(tidytext)  # only for reorder_within & scale_y_reordered functions\nlibrary(scales)    # only for percent function\nlibrary(httr2)     # for making http requests\nlibrary(rvest)     # for web scraping function\nlibrary(robotstxt) # only for paths_allowed function\n```\n:::\n\n \n## Get Symbols\n\nFirst, we want to get some companies for which we want to scrap ESG information from Yahoo Finance. Let us get a table of symbols and industry information of the S&P 500 constituents from Wikipedia. The function read_html normalizes the page to a valid XML document. html_nodes then allows us to point exactly to the table we can find on the website using the name of the CSS node. html_table then parses the HTML table into a data frame. Note that, as one of the last steps, we need to replace all dots in the symbols with dashes to get the symbols used by Yahoo Finance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwikipedia_link <- \"https://en.wikipedia.org/wiki/List_of_S%26P_500_companies\"\n\nsymbols <- read_html(wikipedia_link) |> \n  html_nodes(css = \"table[id='constituents']\") |> \n  html_table() \n\nsymbols <- symbols[[1]] |> \n  select(symbol = Symbol, \n         company = Security, \n         sector = `GICS Sector`, \n         industry = `GICS Sub-Industry`) |> \n  mutate(symbol = str_replace(symbol, \"[.]\", \"-\")) |> \n  arrange(symbol)\n```\n:::\n\n\nThe following chunk prints what we got from Wikipedia. We will use the sector information in the last section of this post where we take a quick look at the scraped data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsymbols\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 503 × 4\n   symbol company                 sector                 industry               \n   <chr>  <chr>                   <chr>                  <chr>                  \n 1 A      Agilent Technologies    Health Care            Health Care Equipment  \n 2 AAL    American Airlines Group Industrials            Passenger Airlines     \n 3 AAPL   Apple Inc.              Information Technology Technology Hardware, S…\n 4 ABBV   AbbVie                  Health Care            Pharmaceuticals        \n 5 ABNB   Airbnb                  Consumer Discretionary Hotels, Resorts & Crui…\n 6 ABT    Abbott                  Health Care            Health Care Equipment  \n 7 ACGL   Arch Capital Group      Financials             Reinsurance            \n 8 ACN    Accenture               Information Technology IT Consulting & Other …\n 9 ADBE   Adobe Inc.              Information Technology Application Software   \n10 ADI    Analog Devices          Information Technology Semiconductors         \n# ℹ 493 more rows\n```\n\n\n:::\n:::\n\n\n## Locate ESG Information \n\nThe point where I struggled when I tried to replicate other guides was the search for the exact location of the information that I want to scrape (and the fact that the old locations seemed to have changed). After some trial and error, it turns out that it is really easy. Once you download a web page, you can in principle either use CSS nodes or XML paths to extract information using `html_nodes()` as above. However, the CSS nodes on Yahoo Finance have a weird structure that is apparently not straight-forward to use in this function. Fortunately, XML paths work perfectly! Google will explain to you what these terms mean, I only demonstrate how you find the relevant paths which we use in the scraping function below.\n\nLet us stick to Apple as our main example and go to the sustainability tab on Yahoo Finance. If we right-click on the ESG score (e.g., using Google Chrome), we can see the the option to ‘Inspect’.\n\n![](yahoo-finance-inspect.png){fig-alt=\"A screenshot of Yahoo Finance ESG Risk Ratings for Apple with Chrome options.\"}\n\nOnce you click on it, a tab to the right opens where you see the underlying code. What is even more useful is the fact that the browser highlights the corresponding elements on the website as you hover over the code. This way, it is really easy to locate the information we are after. So we click on the relevant element and we copy the XML path.\n\n![](yahoo-finance-xpath.png){fig-alt=\"A screenshot of the HTML file of Yahoo Finance ESG Risk Ratings for Apple.\"}\n\nSo the location of the total ESG score on the page is: `'//*[@id=\"Col1-0-Sustainability-Proxy\"]/section/div[1]/div/div[1]/div/div[2]/div[1]'`\n\nWe can just point-and-click on all the items we want to scrap and collect the relevant XML paths. Once we downloaded a page, we just tell `html_node()` where to look for the information we want and afterwards how to parse it.\n\n## Define Functions for Scraping\n\nMy function to scrap ESG data takes two main inputs: the stock symbol and your user agent. We got the symbols from Wikipedia, but we need to define our own user agent. For instance, I use an agent that looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nagent <- \"Your Name (your@email.com). Doing personal research.\"\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nThe main functions then proceeds as follows:\n\n- Construct the link of the page we want to download.\n- Check if scraping is allowed.\n- Download the page.\n- Extract individual information using the XML paths we manually extracted following the point-and-click procedure from above.\n- Collect all information in a table.\n\nLet us start with a function that scrapes a page for a specific symbol:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscrape_sustainability_page <- function(symbol, agent, max_tries = 10) {\n  link <- paste0(\n    \"https://finance.yahoo.com/quote/\", symbol, \"/sustainability?p=\", symbol\n  )\n  \n  check <- suppressMessages(robotstxt::paths_allowed(link))\n  \n  if (check == TRUE) {\n    resp <- request(link) |> \n      req_user_agent(agent) |> \n      req_retry(max_tries = max_tries) |> \n      req_perform()\n    \n    page <- resp$body |> \n      read_html()\n    \n    return(page)\n  } else {\n    stop(paste0(\"No bots allowed on page '\", link ,\"'!\"))\n  }\n}\n```\n:::\n\n\nThe second function extracts the relevant information from the scraped pages and returns it as a table. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_esg_data <- function(symbol, page) {\n  scrape_date <- Sys.time()\n  \n  total_esg_score <- page|> \n    html_node(xpath = '//*[@id=\"Col1-0-Sustainability-Proxy\"]/section/div[1]/div/div[1]/div/div[2]/div[1]')|>\n    html_text()|> \n    parse_number()\n  \n  total_esg_percentile <- page|> \n    html_node(xpath = '//*[@id=\"Col1-0-Sustainability-Proxy\"]/section/div[1]/div/div[1]/div/div[2]/div[2]/span')|>\n    html_text()|> \n    parse_number()\n  \n  environment_risk_score <- page|>\n    html_node(xpath = '//*[@id=\"Col1-0-Sustainability-Proxy\"]/section/div[1]/div/div[2]/div/div[2]/div[1]')|>\n    html_text()|> \n    parse_number()\n  \n  social_risk_score <- page|>\n    html_node(xpath = '//*[@id=\"Col1-0-Sustainability-Proxy\"]/section/div[1]/div/div[3]/div/div[2]/div[1]')|>\n    html_text()|> \n    parse_number() \n  \n  governance_risk_score <- page|>\n    html_node(xpath = '//*[@id=\"Col1-0-Sustainability-Proxy\"]/section/div[1]/div/div[4]/div/div[2]/div[1]')|>\n    html_text()|> \n    parse_number()\n  \n  controversy_level <- page|>\n    html_node(xpath = '//*[@id=\"Col1-0-Sustainability-Proxy\"]/section/div[2]/div[2]/div/div/div/div[1]/div')|>\n    html_text()|> \n    parse_number()\n  \n  last_update_date <- page|>\n    html_node(xpath = '//*[@id=\"Col1-0-Sustainability-Proxy\"]/section/div[3]/span[2]/span')|>\n    html_text()\n  \n  last_update_date <- str_remove(last_update_date, \"Last updated on \")\n  \n  tibble(\n    symbol,\n    scrape_date,\n    total_esg_score,\n    environment_risk_score,\n    social_risk_score,\n    governance_risk_score,\n    controversy_level,\n    last_update_date\n  )\n}\n```\n:::\n\n\n## Scrape ESG Data\n\nNow, let us put everything together: we loop over all symbols to download the relevant pages and extract the relevant ESG data. I store each instance of `esg_data` because the scraping process is very likely to be interrupted by Yahoo Finance as it starts to block requests after some time. By using a loop, I can interrupt the execution any time and continue with the last index.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (j in 1:nrow(symbols)) {\n  page <- scrape_sustainability_page(symbols$symbol[j], agent)\n  esg_data <- extract_esg_data(symbols$symbol[j], page)\n  write_rds(esg_data, paste0(\"data/esg_data_\", symbols$symbol[j], \".rds\"))\n}\n\nesg_data <- list.files(\"data/\", full.names = TRUE) |> \n  map_df(read_rds)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nThe code chunk from above takes a couple of hours in the current specification because of the increasing waiting times. The whole table then looks like this and also includes our initial example Apple:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nesg_data \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 503 × 8\n   symbol scrape_date         total_esg_score environment_risk_score\n   <chr>  <dttm>                        <dbl>                  <dbl>\n 1 A      2023-11-27 00:29:33              15                    0.3\n 2 AAL    2023-11-27 00:29:33              29                   11.5\n 3 AAPL   2023-11-27 00:29:35              17                    0.6\n 4 ABBV   2023-11-27 00:29:37              28                    1.1\n 5 ABNB   2023-11-27 00:29:38              NA                   NA  \n 6 ABT    2023-11-27 00:29:39              25                    3  \n 7 ACGL   2023-11-27 00:29:39              21                    1.5\n 8 ACN    2023-11-27 00:29:40              10                    0.3\n 9 ADBE   2023-11-27 00:29:41              12                    1.9\n10 ADI    2023-11-27 00:29:41              24                   10.1\n# ℹ 493 more rows\n# ℹ 4 more variables: social_risk_score <dbl>, governance_risk_score <dbl>,\n#   controversy_level <dbl>, last_update_date <chr>\n```\n\n\n:::\n:::\n\n\n## Quick Evaluation of ESG Scores\n\nLet us take a quick look at the data we collected. First, let us check the overall coverage of our sample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscales::percent(nrow(na.omit(esg_data)) / nrow(esg_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"86%\"\n```\n\n\n:::\n:::\n\n\nThis is not too bad. I believe that for most of the companies without ESG scores in my sample, Yahoo Finance does not provide any data. Admittedly, I should check manually at some point, but for the purpose of this post, this is definitely a success. To analyze sector-level breakdowns, I construct a summary table which I use as the main source for the following figures.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nesg_scores_sector <- symbols |>\n  left_join(esg_data, join_by(symbol)) |> \n  group_by(sector)|>\n  summarize(companies = n(),\n            coverage = sum(!is.na(total_esg_score)) / n(),\n            across(c(contains(\"score\"), controversy_level), \n                   ~mean(., na.rm = TRUE)))|>\n  arrange(-coverage)\n```\n:::\n\n\nThe first figure gives us the coverage per sector. All real estate companies have ESG scores, while only a bit more than three quarters of communication services feature this information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nesg_scores_sector|>\n  mutate(labels = paste0(companies * coverage, \" out of \", companies))|>\n  ggplot(aes(y = reorder(sector, coverage), \n             x = coverage, fill = factor(round(coverage, 0)))) +\n  geom_col(show.legend = FALSE) + \n  theme_minimal() + \n  geom_text(aes(label = labels), hjust = 1.1, color = \"white\") +\n  coord_cartesian(xlim = c(0, 1)) +\n  scale_x_continuous(labels = scales::percent) +\n  labs(x = NULL, y = NULL,\n       title = \"Number of companies with ESG scores per sector\",\n       subtitle = \"Based on Yahoo Finance and S&P 500 data as of November 2023\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){fig-alt='Number of companies with ESG scores per sector. Based on Yahoo Finance and S&P 500 data as of November 2023.' width=2100}\n:::\n:::\n\n\nNext, I want to look at average ESG scores by sector. For instance, the real estate sector has the lowest total ESG score, indicating the lowest degree to which a sector’s business value is at risk driven by environmental, social and governance risks. Financials exhibit the the lowest environmental risk, while the energy sector (at least the part included in the S&P 500) has the highest exposure to environmental risks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nesg_scores_sector|>\n  pivot_longer(cols = contains(\"score\"))|>\n  mutate(name = str_to_title(str_replace_all(name, \"_\", \" \")),\n         name = factor(name),\n         sector = tidytext::reorder_within(sector, -value, name))|>\n  ggplot(aes(y = sector, x = value, fill = name)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~name, scales = \"free_y\") +\n  theme_minimal() + \n  tidytext::scale_y_reordered() +\n  geom_text(aes(label = round(value, 0)), hjust = 1.1, color = \"white\") +\n  labs(y = NULL, x = NULL,\n       title = \"Average ESG scores per sector\",\n       subtitle = \"Based on Yahoo Finance and S&P 500 data as of November 2023\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){fig-alt='Average ESG scores per sector. Based on Yahoo Finance and S&P 500 data as of November 2023.' width=2100}\n:::\n:::\n\n\nFinally, I am also interested in the average controversy level which measures to which degree companies are involved in incidents and events that may negatively impact stakeholders, the environment or their operations. I decided to plot the controversy of each sector relative to the average overall controversy. Real estate and information technology seem to be far less controverse than consumer staples and communication services.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nesg_scores_sector|>\n  mutate(controversy_relative = controversy_level - mean(controversy_level)) |> \n  ggplot(aes(y = reorder(sector, -controversy_relative), \n             x = controversy_relative, fill = (controversy_relative < 0))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  theme_minimal() + theme(legend.position = \"none\") + \n  coord_cartesian(xlim = c(-1.5, 1.5)) +\n  labs(y = NULL, x = NULL,\n       title = \"Average sector-level controversy relative to overall controversy\",\n       subtitle = \"Based on Yahoo Finance and S&P 500 data as of November 2023\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){fig-alt='Average sector-level controversy relative to overall controversy. Based on Yahoo Finance and S&P 500 data as of November 2023.' width=2100}\n:::\n:::\n\n\nI think there is a lot more interesting stuff to uncover using the ESG scores, but for now I’ll leave it at that. I am nonetheless surprised, how easy scraping information from websites is using these amazing packages.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}