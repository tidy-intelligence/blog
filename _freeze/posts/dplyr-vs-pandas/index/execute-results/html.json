{
  "hash": "c92bc523ed87451a993274077a685c75",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidy Data Manipulation: dplyr vs pandas\"\ndescription: \"A comparison of R's dplyr and Python's pandas data manipulation packages\"\nmetadata:\n  pagetitle: \"Tidy Data Manipulation: dplyr vs pandas\"\nauthor: \"Christoph Scheuch\"\ndate: \"2024-01-07\" \nimage: thumbnail.png\nimage-alt: A panda bear sitting calmly in a green bamboo forest. The panda has a curious expression as it looks at a red-handled plier placed on the ground in front of it. The plier is shiny and contrasts with the natural, lush environment. The background is filled with thick bamboo stalks and a variety of green plants, enhancing the natural habitat of the panda. The scene is peaceful, with soft, natural lighting highlighting the panda and the plier. Created with DALL-E 3.\ncategories: \n  - R\n  - Python\n  - Manipulation\n---\n\n\nThere are a myriad of options to perform essential data manipulation tasks in R and Python (see, for instance, my other posts on [dplyr vs ibis](../dplyr-vs-ibis/index.qmd) and [dplyr vs polars](../dplyr-vs-polars/index.qmd)). However, if we want to do tidy data science in R, there is a clear forerunner: `dplyr`. In the world of Python, `pandas` is the most popular data analysis library. In this blog post, I illustrate their syntactic similarities and highlight differences between these two packages that emerge for a few key tasks. \n\nBefore we dive into the comparison, a short introduction to the packages: the `dplyr` package in R allows users to refer to columns without quotation marks due to its implementation of non-standard evaluation (NSE). NSE is a programming technique used in R that allows functions to capture the expressions passed to them as arguments, rather than just the values of those arguments. The primary goal of NSE in the context of `dplyr` is to create a more user-friendly and intuitive syntax. This makes data manipulation tasks more straightforward and aligns with the general philosophy of the `tidyverse` to make data science faster, easier, and more fun.[^1]\n\n`pandas` is also designed for data analysis and provides a comprehensive range of functionalities for data manipulation and it is designed to efficiently handle in-memory data. The package has a large community, given Python's popularity in various fields. The learning curve might be steeper for beginners due to Python's general-purpose nature and the verbosity of `pandas` syntax, but it integrates well with web apps, machine learning models, etc. \n\n::: {.callout-note}\n## pandas syntax\n\nIf you are a seasoned `pandas` user, you might find my approach non-Pythonic for at least two deliberate choices that I made: (i) I prefer to have chainable methods over using verbose expressions over multiple lines; and (ii) I prefer to have whitespace around all equal signs, not just for variable assignments. In my view, these two choices improve the compliance of `pandas` with tidy coding principles by increasing the readability of code. \n\n:::\n\n# Loading packages and data\n\nWe start by loading the main packages of interest and the popular `palmerpenguins` package that exists for both R and Python. We then use the `penguins` data frame as the data to compare all functions and methods below. \n\n::: {.panel-tabset}\n### dplyr\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(palmerpenguins)\n\npenguins <- palmerpenguins::penguins\n```\n:::\n\n### pandas\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nfrom palmerpenguins import load_penguins\n\npenguins = load_penguins()\n```\n:::\n\n:::\n\n# Work with rows\n\n## Filter rows\n\nFiltering rows with `dplyr` is based on NSE and the `dplyr::filter()` function. To replicate the same results with `pandas`, you can use `pandas.query()` method which accepts a string with the filter conditions as input. \n\n::: {.panel-tabset}\n#### dplyr\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  filter(species == \"Adelie\" & \n           island %in% c(\"Biscoe\", \"Dream\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>           <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Biscoe           37.8          18.3               174        3400\n 2 Adelie  Biscoe           37.7          18.7               180        3600\n 3 Adelie  Biscoe           35.9          19.2               189        3800\n 4 Adelie  Biscoe           38.2          18.1               185        3950\n 5 Adelie  Biscoe           38.8          17.2               180        3800\n 6 Adelie  Biscoe           35.3          18.9               187        3800\n 7 Adelie  Biscoe           40.6          18.6               183        3550\n 8 Adelie  Biscoe           40.5          17.9               187        3200\n 9 Adelie  Biscoe           37.9          18.6               172        3150\n10 Adelie  Biscoe           40.5          18.9               180        3950\n# ℹ 90 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n#### pandas\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .query(\"species == 'Adelie' and island in ['Biscoe', 'Dream']\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    species  island  bill_length_mm  ...  body_mass_g     sex  year\n20   Adelie  Biscoe            37.8  ...       3400.0  female  2007\n21   Adelie  Biscoe            37.7  ...       3600.0    male  2007\n22   Adelie  Biscoe            35.9  ...       3800.0  female  2007\n23   Adelie  Biscoe            38.2  ...       3950.0    male  2007\n24   Adelie  Biscoe            38.8  ...       3800.0    male  2007\n..      ...     ...             ...  ...          ...     ...   ...\n147  Adelie   Dream            36.6  ...       3475.0  female  2009\n148  Adelie   Dream            36.0  ...       3450.0  female  2009\n149  Adelie   Dream            37.8  ...       3750.0    male  2009\n150  Adelie   Dream            36.0  ...       3700.0  female  2009\n151  Adelie   Dream            41.5  ...       4000.0    male  2009\n\n[100 rows x 8 columns]\n```\n\n\n:::\n:::\n\n:::\n\n## Slice rows\n\n`dplyr::slice()` takes integers with row numbers as inputs, so you can use ranges and arbitrary vectors of integers. `pandas.iloc[]` also provides a function for integer-location based indexing (note that indexing starts at 0 in Python, while it starts at 1 in R). Note that `pandas.iloc[]` requires square brackets instead of parentheses. \n\n::: {.panel-tabset}\n#### dplyr\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  slice(10:20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           42            20.2               190        4250\n 2 Adelie  Torgersen           37.8          17.1               186        3300\n 3 Adelie  Torgersen           37.8          17.3               180        3700\n 4 Adelie  Torgersen           41.1          17.6               182        3200\n 5 Adelie  Torgersen           38.6          21.2               191        3800\n 6 Adelie  Torgersen           34.6          21.1               198        4400\n 7 Adelie  Torgersen           36.6          17.8               185        3700\n 8 Adelie  Torgersen           38.7          19                 195        3450\n 9 Adelie  Torgersen           42.5          20.7               197        4500\n10 Adelie  Torgersen           34.4          18.4               184        3325\n11 Adelie  Torgersen           46            21.5               194        4200\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n#### pandas\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .iloc[9:20]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   species     island  bill_length_mm  ...  body_mass_g     sex  year\n9   Adelie  Torgersen            42.0  ...       4250.0     NaN  2007\n10  Adelie  Torgersen            37.8  ...       3300.0     NaN  2007\n11  Adelie  Torgersen            37.8  ...       3700.0     NaN  2007\n12  Adelie  Torgersen            41.1  ...       3200.0  female  2007\n13  Adelie  Torgersen            38.6  ...       3800.0    male  2007\n14  Adelie  Torgersen            34.6  ...       4400.0    male  2007\n15  Adelie  Torgersen            36.6  ...       3700.0  female  2007\n16  Adelie  Torgersen            38.7  ...       3450.0  female  2007\n17  Adelie  Torgersen            42.5  ...       4500.0    male  2007\n18  Adelie  Torgersen            34.4  ...       3325.0  female  2007\n19  Adelie  Torgersen            46.0  ...       4200.0    male  2007\n\n[11 rows x 8 columns]\n```\n\n\n:::\n:::\n\n:::\n\n## Arrange rows\n\nTo orders the rows of a data frame by the values of selected columns, we have `dplyr::arrange()` and `pandas.sort_values()`. Note that both approaches arrange rows in an an ascending order and puts missing values last as defaults. \n\n::: {.panel-tabset}\n#### dplyr\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  arrange(island, desc(bill_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>           <dbl>         <dbl>             <int>       <int>\n 1 Gentoo  Biscoe           59.6          17                 230        6050\n 2 Gentoo  Biscoe           55.9          17                 228        5600\n 3 Gentoo  Biscoe           55.1          16                 230        5850\n 4 Gentoo  Biscoe           54.3          15.7               231        5650\n 5 Gentoo  Biscoe           53.4          15.8               219        5500\n 6 Gentoo  Biscoe           52.5          15.6               221        5450\n 7 Gentoo  Biscoe           52.2          17.1               228        5400\n 8 Gentoo  Biscoe           52.1          17                 230        5550\n 9 Gentoo  Biscoe           51.5          16.3               230        5500\n10 Gentoo  Biscoe           51.3          14.2               218        5300\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n#### pandas\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .sort_values(by = [\"island\", \"bill_length_mm\"], \n               ascending = [True, False])\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    species     island  bill_length_mm  ...  body_mass_g     sex  year\n185  Gentoo     Biscoe            59.6  ...       6050.0    male  2007\n253  Gentoo     Biscoe            55.9  ...       5600.0    male  2009\n267  Gentoo     Biscoe            55.1  ...       5850.0    male  2009\n215  Gentoo     Biscoe            54.3  ...       5650.0    male  2008\n259  Gentoo     Biscoe            53.4  ...       5500.0    male  2009\n..      ...        ...             ...  ...          ...     ...   ...\n80   Adelie  Torgersen            34.6  ...       3200.0  female  2008\n18   Adelie  Torgersen            34.4  ...       3325.0  female  2007\n8    Adelie  Torgersen            34.1  ...       3475.0     NaN  2007\n70   Adelie  Torgersen            33.5  ...       3600.0  female  2008\n3    Adelie  Torgersen             NaN  ...          NaN     NaN  2007\n\n[344 rows x 8 columns]\n```\n\n\n:::\n:::\n\n:::\n\n# Work with columns\n\n## Select columns\n\nSelecting a subset of columns works very similarly with`dplyr::select()` and `pandas.get()`. The former accepts column names using NSE (or vectors of charaters), while the latter requires a vector of strings with column names as inputs.\n\n::: {.panel-tabset}\n#### dplyr\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  select(bill_length_mm, sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 2\n   bill_length_mm sex   \n            <dbl> <fct> \n 1           39.1 male  \n 2           39.5 female\n 3           40.3 female\n 4           NA   <NA>  \n 5           36.7 female\n 6           39.3 male  \n 7           38.9 female\n 8           39.2 male  \n 9           34.1 <NA>  \n10           42   <NA>  \n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n#### pandas\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .get([\"bill_length_mm\", \"sex\"])\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     bill_length_mm     sex\n0              39.1    male\n1              39.5  female\n2              40.3  female\n3               NaN     NaN\n4              36.7  female\n..              ...     ...\n339            55.8    male\n340            43.5  female\n341            49.6    male\n342            50.8    male\n343            50.2  female\n\n[344 rows x 2 columns]\n```\n\n\n:::\n:::\n\n:::\n\n### R columns\n\nRenaming columns also works very similarly with the major difference that `pandas.rename()` takes a dictionary with mappings of old to new names as input, while `dplyr::rename()` takes variable names via the usual NSE.\n\n::: {.panel-tabset}\n#### dplyr\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  rename(bill_length = bill_length_mm,\n         bill_depth = bill_depth_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island    bill_length bill_depth flipper_length_mm body_mass_g sex   \n   <fct>   <fct>           <dbl>      <dbl>             <int>       <int> <fct> \n 1 Adelie  Torgersen        39.1       18.7               181        3750 male  \n 2 Adelie  Torgersen        39.5       17.4               186        3800 female\n 3 Adelie  Torgersen        40.3       18                 195        3250 female\n 4 Adelie  Torgersen        NA         NA                  NA          NA <NA>  \n 5 Adelie  Torgersen        36.7       19.3               193        3450 female\n 6 Adelie  Torgersen        39.3       20.6               190        3650 male  \n 7 Adelie  Torgersen        38.9       17.8               181        3625 female\n 8 Adelie  Torgersen        39.2       19.6               195        4675 male  \n 9 Adelie  Torgersen        34.1       18.1               193        3475 <NA>  \n10 Adelie  Torgersen        42         20.2               190        4250 <NA>  \n# ℹ 334 more rows\n# ℹ 1 more variable: year <int>\n```\n\n\n:::\n:::\n\n#### pandas\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .rename(columns = {\"bill_length_mm\": \"bill_length\",\n                     \"bill_depth_mm\" : \"bill_depth\"})\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       species     island  bill_length  ...  body_mass_g     sex  year\n0       Adelie  Torgersen         39.1  ...       3750.0    male  2007\n1       Adelie  Torgersen         39.5  ...       3800.0  female  2007\n2       Adelie  Torgersen         40.3  ...       3250.0  female  2007\n3       Adelie  Torgersen          NaN  ...          NaN     NaN  2007\n4       Adelie  Torgersen         36.7  ...       3450.0  female  2007\n..         ...        ...          ...  ...          ...     ...   ...\n339  Chinstrap      Dream         55.8  ...       4000.0    male  2009\n340  Chinstrap      Dream         43.5  ...       3400.0  female  2009\n341  Chinstrap      Dream         49.6  ...       3775.0    male  2009\n342  Chinstrap      Dream         50.8  ...       4100.0    male  2009\n343  Chinstrap      Dream         50.2  ...       3775.0  female  2009\n\n[344 rows x 8 columns]\n```\n\n\n:::\n:::\n\n:::\n\n## Mutate columns\n\nTransforming existing columns or creating new ones is an essential part of data analysis. `dplyr::mutate()` and `pandas.assign()` are the work horses for these tasks. While `dplyr` starts with column names before the expressions that transform columns, `pandas` uses the `lambda` function to assign expressions to new columns. Note that you have to split up variable assignments if you want to refer to a newly created variable in `pandas`, while you can refer to the new variables in the same mutate block in `dplyr`.\n\n::: {.panel-tabset}\n#### dplyr\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  mutate(ones = 1,\n         bill_length = bill_length_mm / 10,\n         bill_length_squared = bill_length^2) |> \n  select(ones, bill_length_mm, bill_length, bill_length_squared)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 4\n    ones bill_length_mm bill_length bill_length_squared\n   <dbl>          <dbl>       <dbl>               <dbl>\n 1     1           39.1        3.91                15.3\n 2     1           39.5        3.95                15.6\n 3     1           40.3        4.03                16.2\n 4     1           NA         NA                   NA  \n 5     1           36.7        3.67                13.5\n 6     1           39.3        3.93                15.4\n 7     1           38.9        3.89                15.1\n 8     1           39.2        3.92                15.4\n 9     1           34.1        3.41                11.6\n10     1           42          4.2                 17.6\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n#### pandas\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins \n  .assign(ones = 1,\n          bill_length = lambda x: x[\"bill_length_mm\"] / 10)\n  .assign(bill_length_squared = lambda x: x[\"bill_length\"] ** 2)\n  .get([\"ones\", \"bill_length_mm\", \"bill_length\", \"bill_length_squared\"])\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     ones  bill_length_mm  bill_length  bill_length_squared\n0       1            39.1         3.91              15.2881\n1       1            39.5         3.95              15.6025\n2       1            40.3         4.03              16.2409\n3       1             NaN          NaN                  NaN\n4       1            36.7         3.67              13.4689\n..    ...             ...          ...                  ...\n339     1            55.8         5.58              31.1364\n340     1            43.5         4.35              18.9225\n341     1            49.6         4.96              24.6016\n342     1            50.8         5.08              25.8064\n343     1            50.2         5.02              25.2004\n\n[344 rows x 4 columns]\n```\n\n\n:::\n:::\n\n:::\n\n### dplyrelocate columns\n\n`dplyr::relocate()` provides options to change the positions of columns in a data frame, using the same syntax as `dplyr::select()`. In addition, there are the options `.after` and `.before` to provide users with additional shortcuts. \n\nThe recommended way to relocate columns in `pandas` is to use the `pandas.get()` method, but there are no options as in `dplyr::relocate()`. In fact, the safest way to consistently get the correct order of columns is to explicitly specify them. \n\n::: {.panel-tabset}\n#### dplyr\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  relocate(c(species, bill_length_mm), .before = sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   island    bill_depth_mm flipper_length_mm body_mass_g species bill_length_mm\n   <fct>             <dbl>             <int>       <int> <fct>            <dbl>\n 1 Torgersen          18.7               181        3750 Adelie            39.1\n 2 Torgersen          17.4               186        3800 Adelie            39.5\n 3 Torgersen          18                 195        3250 Adelie            40.3\n 4 Torgersen          NA                  NA          NA Adelie            NA  \n 5 Torgersen          19.3               193        3450 Adelie            36.7\n 6 Torgersen          20.6               190        3650 Adelie            39.3\n 7 Torgersen          17.8               181        3625 Adelie            38.9\n 8 Torgersen          19.6               195        4675 Adelie            39.2\n 9 Torgersen          18.1               193        3475 Adelie            34.1\n10 Torgersen          20.2               190        4250 Adelie            42  \n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n#### pandas\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .get([\"island\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\",\n        \"species\", \"bill_length_mm\", \"sex\"])\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        island  bill_depth_mm  ...  bill_length_mm     sex\n0    Torgersen           18.7  ...            39.1    male\n1    Torgersen           17.4  ...            39.5  female\n2    Torgersen           18.0  ...            40.3  female\n3    Torgersen            NaN  ...             NaN     NaN\n4    Torgersen           19.3  ...            36.7  female\n..         ...            ...  ...             ...     ...\n339      Dream           19.8  ...            55.8    male\n340      Dream           18.1  ...            43.5  female\n341      Dream           18.2  ...            49.6    male\n342      Dream           19.0  ...            50.8    male\n343      Dream           18.7  ...            50.2  female\n\n[344 rows x 7 columns]\n```\n\n\n:::\n:::\n\n:::\n\n# Work with groups of rows\n\n## Simple summaries by group\n\nLet's suppose we want to compute summaries by groups such as means or medians. Both packages are very similar again: on the R side you have `dplyr::group_by()` and `dplyr::summarize()`, while on the Python side you have `pandas.groupby()` and `pandas.agg()`. \n\nNote that `dplyr::groupby()` also automatically arranges the results by the group, so the reproduce the results of `dplyr`, we need to add `pandas.sort()` to the chain. \n\n::: {.panel-tabset}\n#### dplyr\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  group_by(island) |> \n  summarize(bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  island    bill_depth_mean\n  <fct>               <dbl>\n1 Biscoe               15.9\n2 Dream                18.3\n3 Torgersen            18.4\n```\n\n\n:::\n:::\n\n#### pandas\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .groupby(\"island\")\n  .agg(bill_depth_mean = (\"bill_depth_mm\", \"mean\"))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           bill_depth_mean\nisland                    \nBiscoe           15.874850\nDream            18.344355\nTorgersen        18.429412\n```\n\n\n:::\n:::\n\n:::\n\n## More complicated summaries by group\n\nTypically, you want to create multiple different summaries by groups. `dplyr` provides a lot of flexibility to create new variables on the fly, as does `pandas`. For instance, we can pass expressions to them mean functions in order to create the share of female penguins per island in the summary statement. Note that you again have to use `lambda` functions in `pandas`. \n\n::: {.panel-tabset}\n#### dplyr\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  group_by(island) |> \n  summarize(count = n(),\n            bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE),\n            flipper_length_median = median(flipper_length_mm, na.rm = TRUE),\n            body_mass_sd = sd(body_mass_g, na.rm = TRUE),\n            share_female = mean(sex == \"female\", na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n  island   count bill_depth_mean flipper_length_median body_mass_sd share_female\n  <fct>    <int>           <dbl>                 <dbl>        <dbl>        <dbl>\n1 Biscoe     168            15.9                   214         783.        0.491\n2 Dream      124            18.3                   193         417.        0.496\n3 Torgers…    52            18.4                   191         445.        0.511\n```\n\n\n:::\n:::\n\n#### pandas\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .groupby(\"island\")\n  .agg(count = (\"island\", \"size\"),\n       bill_depth_mean = (\"bill_depth_mm\", \"mean\"),\n       flipper_length_median = (\"flipper_length_mm\", \"median\"),\n       body_mass_sd = (\"body_mass_g\", \"std\"),\n       share_female = (\"sex\", lambda x: (x == \"female\").mean))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           count  ...                                       share_female\nisland            ...                                                   \nBiscoe       168  ...  <bound method Series.mean of 20      True\\n21 ...\nDream        124  ...  <bound method Series.mean of 30      True\\n31 ...\nTorgersen     52  ...  <bound method Series.mean of 0      False\\n1  ...\n\n[3 rows x 5 columns]\n```\n\n\n:::\n:::\n\n:::\n\n# Conclusion\n\nThis post highlights syntactic similarities and differences across R's `dplyr` and Python's `pandas` packages. Two key points emerge: (i) `dplyr` heavily relies on NSE to enable a syntax that refrains from using strings, something that is not possible in Python; (ii) the structure of inputs to `pandas` methods is inconsistent compared to `dplyr` (sometimes inputs are vectors of strings, sometimes just a single string, sometimes dictionaries, etc.). I want to close this post by emphasizing that both languages and packages have their own merits and supporters. I personally find it hard to remember the syntax of each `pandas` method, so I'm much more prone to on-the-fly coding errors than compared to `dplyr`.\n\n[^1]: See the unifying principles of the tidyverse: [https://design.tidyverse.org/unifying.html](https://design.tidyverse.org/unifying.html).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}