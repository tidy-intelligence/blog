{
  "hash": "3a9add522ed323b4f676c0db142b3049",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidy Data Visualization: ggplot2 vs plotnine\"\ndescription: \"A comparison of implementations of the grammar of graphics in R and Python.\"\nmetadata:\n  pagetitle: \"Tidy Data Visualization: ggplot2 vs plotnine\"\nauthor: \"Christoph Scheuch\"\ndate: \"2024-01-14\" \nimage: thumbnail.png\nimage-alt: An image of a bright and friendly office setting with two equally sized screens placed centrally. Each screen displays a simple line chart without any text or numbers. The office is very well-lit, giving a warm and inviting ambiance. The decor is colorful and cheerful, with a minimalist design. The two screens are on a sleek, modern desk in the center of the image. The line charts are clear and straightforward. The overall atmosphere of the office is lively and welcoming, with vibrant colors and ample natural light. Created with DALL-E 3.\ndraft: true\n---\n\n\nBoth `ggplot2` and `plotnine` are based on Leland Wilkinson's Grammar of Graphics, a set of principles for creating consistent and effective statistical graphics. This means they both use similar syntax and logic for constructing plots, making it relatively easy for users to transition between them. `ggplot2`, developed by Hadley Wickham, is a cornerstone of the R community and integrates seamlessly with other `tidyverse` packages. `plotnine`, on the other hand, is a Python package that attempts to bring `ggplot2` functionality and philosophy to Python users, but it is not part of a larger ecosystem (although it works well with `pandas`, Python's most popular data manipulation package).\n\nBoth packages use a layer-based approach, where a plot is built up by adding components like axes, geoms, stats, and scales. However, `ggplot2` benefits from R’s native support for data frames and its formula notation, which can make its syntax more concise. `plotnine` has to adhere to Python’s syntax rules, in particular referring to columns via strings, which can occasionally lead to more verbose code.\n\nThe types of plots that I chose for the comparison heavily draw on the examples given in [R for Data Science](https://r4ds.hadley.nz/data-visualize) (an amazin resource if you want to get started with data visualization).\n\n::: {.panel-tabset}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\npenguins <- na.omit(palmerpenguins::penguins)\n\nggplot(penguins, \n       aes(x = bill_length_mm, y = bill_depth_mm, \n           color = species, shape = species)) + \n  geom_point() + \n  geom_smooth(method = \"lm\", formula = 'y ~ x') +\n  labs(x = \"Bill length (mm)\", y = \"Bill Width (mm)\", \n       title = \"Bill Length vs. Bill Width\", \n       subtitle = \"Using geom_point and geom_smooth of the ggplot2 package\",\n       color = \"Species\", shape = \"Species\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=2100}\n:::\n:::\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom plotnine import *\nfrom palmerpenguins import load_penguins\n\npenguins = load_penguins().dropna()\n\n(ggplot(penguins, \n        aes(x = \"bill_length_mm\", y = \"bill_depth_mm\", \n            color = \"species\", shape = \"species\"))\n  + geom_point()\n  + geom_smooth(method = \"lm\", formula = 'y ~ x')\n  + labs(x = \"Bill Length (mm)\", y = \"Bill Width (mm)\", \n         title = \"Bill Length vs. Bill Width\", \n         subtitle = \"Using geom_point and geom_smooth of the plotnine package\",\n         color = \"Species\", shape = \"Species\")\n  + theme_minimal()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (1280 x 960)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=614}\n:::\n:::\n\n::: \n\n## Visualizing Distributions\n\n### A categorical variable\n\n### A numerical variable\n\n## Visualizing Relationships\n\n### A numerical and a categorical variable\n\n### Two categorical variables\n\n### Two numerical variables\n\n### Three or more variables\n\n## Saving Plots\n\n## Conclusion\n\nIn terms of syntax, `ggplot2` and `plotnine` are remarkably similar, with minor differences primarily due to the differences between R and Python:\n\n- Column references are implemented via strings in Python, while you can use unquoted column names in R due to its support of non-standard evaluation. \n- `+` has to come at the end of the line R, not at the start. In Python, it makes more sense to have it at the start because you can comment out code better, but in principle also at the line end is possible. \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}