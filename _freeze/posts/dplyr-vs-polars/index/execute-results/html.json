{
  "hash": "94bc2b975dfe364aa12cbded884a2fa1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidy Data Manipulation: dplyr vs polars\"\ndescription: \"A comparison of R's dplyr and Python's polars data manipulation packages\"\nmetadata:\n  pagetitle: \"Tidy Data Manipulation: dplyr vs polars\"\nauthor: \"Christoph Scheuch\"\ndate: \"2024-01-02\" \nimage: thumbnail.png\nimage-alt: A realistic polar bear sitting on a snowy landscape, looking curiously at a pair of pliers lying on the ground. The polar bear should have a thick, white coat and appear both majestic and inquisitive. The pliers are standard steel with red rubber grips, contrasting against the white snow. The scene is set in the Arctic with a clear blue sky and a few distant icebergs in the background. Created with DALL-E 3.\n---\n\n\nThere are a myriad of options to perform essential data manipulation tasks in R and Python (see, for instance, my other post on [dplyr vs ibis](../dplyr-vs-ibis/index.qmd)). However, if we want to do tidy data science in R, there is a clear forerunner: `dplyr`. In the world of Python, `polars` is a relatively new kid on the block that shares a lot of semantic with `dplyr`. In this blog post, I illustrate their syntactic similarities and highlight differences between these two packages that emerge for a few key tasks. \n\nBefore we dive into the comparison, a short introduction to the packages: the `dplyr` package in R allows users to refer to columns without quotation marks due to its implementation of non-standard evaluation (NSE). NSE is a programming technique used in R that allows functions to capture the expressions passed to them as arguments, rather than just the values of those arguments. The primary goal of NSE in the context of `dplyr` is to create a more user-friendly and intuitive syntax. This makes data manipulation tasks more straightforward and aligns with the general philosophy of the `tidyverse` to make data science faster, easier, and more fun.[^1]\n\n`polars` is also designed for data manipulation and heavily optimized for performance, but there are significant differences in their approach, especially in how they handle column referencing and expression evaluation. Python generally relies on standard evaluation, meaning expressions are evaluated to their values before being passed to a function. In `polars`, column references typically need to be explicitly stated, often using quoted names or through methods attached to data frame objects.\n\n# Loading packages\n\nWe start by loading the main packages of interest and the popular `palmerpenguins` package that exists for both R and Python. We then use the `penguins` data frame as the data to compare all functions and methods below. Note that we also limit the print output of `polars` data frames to 10 rows to prevent this post being flooded by excessively long tables. \n\n::: {.panel-tabset}\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'dplyr' was built under R version 4.3.2\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n\npenguins <- palmerpenguins::penguins\n```\n:::\n\n## Python\n\n::: {.cell}\n\n```{.python .cell-code}\nimport polars as pl\nfrom palmerpenguins import load_penguins\n\npl.Config(tbl_rows = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<polars.config.Config object at 0x00000214CB7D73A0>\n```\n\n\n:::\n\n```{.python .cell-code}\n\npenguins = load_penguins().pipe(pl.from_pandas)\n```\n:::\n\n:::\n\n# Work with rows\n\n## Filter rows\n\nFiltering rows works very similarly for both packages, they even have the same function names: `dplyr::filter()` and `polars.filter()`. To select columns in `polars`, you need the `polars.col()` selector. \n\n::: {.panel-tabset}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  filter(species == \"Adelie\" & \n           island %in% c(\"Biscoe\", \"Dream\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>           <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Biscoe           37.8          18.3               174        3400\n 2 Adelie  Biscoe           37.7          18.7               180        3600\n 3 Adelie  Biscoe           35.9          19.2               189        3800\n 4 Adelie  Biscoe           38.2          18.1               185        3950\n 5 Adelie  Biscoe           38.8          17.2               180        3800\n 6 Adelie  Biscoe           35.3          18.9               187        3800\n 7 Adelie  Biscoe           40.6          18.6               183        3550\n 8 Adelie  Biscoe           40.5          17.9               187        3200\n 9 Adelie  Biscoe           37.9          18.6               172        3150\n10 Adelie  Biscoe           40.5          18.9               180        3950\n# ℹ 90 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .filter(\n    (pl.col(\"species\") == \"Adelie\") & \n    (pl.col(\"island\").is_in([\"Biscoe\", \"Dream\"]))) \n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (100, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Biscoe&quot;</td><td>37.8</td><td>18.3</td><td>174.0</td><td>3400.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Biscoe&quot;</td><td>37.7</td><td>18.7</td><td>180.0</td><td>3600.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Biscoe&quot;</td><td>35.9</td><td>19.2</td><td>189.0</td><td>3800.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Biscoe&quot;</td><td>38.2</td><td>18.1</td><td>185.0</td><td>3950.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Biscoe&quot;</td><td>38.8</td><td>17.2</td><td>180.0</td><td>3800.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>36.6</td><td>18.4</td><td>184.0</td><td>3475.0</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>36.0</td><td>17.8</td><td>195.0</td><td>3450.0</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>37.8</td><td>18.1</td><td>193.0</td><td>3750.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>36.0</td><td>17.1</td><td>187.0</td><td>3700.0</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>41.5</td><td>18.5</td><td>201.0</td><td>4000.0</td><td>&quot;male&quot;</td><td>2009</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n:::\n\n## Slice rows\n\n`dplyr::slice()` takes integers with row numbers as inputs, so you can use ranges and arbitrary vectors of integers. `polars.slice()` only takes the start index and the length of the slice as inputs. For instance, to the the same result of slicing rows 10 to 20, the code looks as follows (note that indexing starts at 0 in Python, while it starts at 1 in R):\n\n::: {.panel-tabset}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  slice(10:20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           42            20.2               190        4250\n 2 Adelie  Torgersen           37.8          17.1               186        3300\n 3 Adelie  Torgersen           37.8          17.3               180        3700\n 4 Adelie  Torgersen           41.1          17.6               182        3200\n 5 Adelie  Torgersen           38.6          21.2               191        3800\n 6 Adelie  Torgersen           34.6          21.1               198        4400\n 7 Adelie  Torgersen           36.6          17.8               185        3700\n 8 Adelie  Torgersen           38.7          19                 195        3450\n 9 Adelie  Torgersen           42.5          20.7               197        4500\n10 Adelie  Torgersen           34.4          18.4               184        3325\n11 Adelie  Torgersen           46            21.5               194        4200\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .slice(9, 11)  \n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (11, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>42.0</td><td>20.2</td><td>190.0</td><td>4250.0</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>37.8</td><td>17.1</td><td>186.0</td><td>3300.0</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>37.8</td><td>17.3</td><td>180.0</td><td>3700.0</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>41.1</td><td>17.6</td><td>182.0</td><td>3200.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>38.6</td><td>21.2</td><td>191.0</td><td>3800.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>36.6</td><td>17.8</td><td>185.0</td><td>3700.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>38.7</td><td>19.0</td><td>195.0</td><td>3450.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>42.5</td><td>20.7</td><td>197.0</td><td>4500.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>34.4</td><td>18.4</td><td>184.0</td><td>3325.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>46.0</td><td>21.5</td><td>194.0</td><td>4200.0</td><td>&quot;male&quot;</td><td>2007</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n:::\n\n## Arrange rows\n\nTo orders the rows of a data frame by the values of selected columns, we have `dplyr::arrange()` and `polars.sort()`. Note that `dplyr::arrange()` arranges rows in an an ascending order and puts `NA` values last. `polars.sort()`, on the other hand, arranges rows in an ascending order and starts with `null` as default. Note that there are options to control these defaults. \n\n::: {.panel-tabset}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  arrange(island, -bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>           <dbl>         <dbl>             <int>       <int>\n 1 Gentoo  Biscoe           59.6          17                 230        6050\n 2 Gentoo  Biscoe           55.9          17                 228        5600\n 3 Gentoo  Biscoe           55.1          16                 230        5850\n 4 Gentoo  Biscoe           54.3          15.7               231        5650\n 5 Gentoo  Biscoe           53.4          15.8               219        5500\n 6 Gentoo  Biscoe           52.5          15.6               221        5450\n 7 Gentoo  Biscoe           52.2          17.1               228        5400\n 8 Gentoo  Biscoe           52.1          17                 230        5550\n 9 Gentoo  Biscoe           51.5          16.3               230        5500\n10 Gentoo  Biscoe           51.3          14.2               218        5300\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .sort([\"island\", \"bill_length_mm\"], \n        descending=[False, True], nulls_last=True)\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (344, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Gentoo&quot;</td><td>&quot;Biscoe&quot;</td><td>59.6</td><td>17.0</td><td>230.0</td><td>6050.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Gentoo&quot;</td><td>&quot;Biscoe&quot;</td><td>55.9</td><td>17.0</td><td>228.0</td><td>5600.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Gentoo&quot;</td><td>&quot;Biscoe&quot;</td><td>55.1</td><td>16.0</td><td>230.0</td><td>5850.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Gentoo&quot;</td><td>&quot;Biscoe&quot;</td><td>54.3</td><td>15.7</td><td>231.0</td><td>5650.0</td><td>&quot;male&quot;</td><td>2008</td></tr><tr><td>&quot;Gentoo&quot;</td><td>&quot;Biscoe&quot;</td><td>53.4</td><td>15.8</td><td>219.0</td><td>5500.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>34.6</td><td>17.2</td><td>189.0</td><td>3200.0</td><td>&quot;female&quot;</td><td>2008</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>34.4</td><td>18.4</td><td>184.0</td><td>3325.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>34.1</td><td>18.1</td><td>193.0</td><td>3475.0</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>33.5</td><td>19.0</td><td>190.0</td><td>3600.0</td><td>&quot;female&quot;</td><td>2008</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>2007</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n:::\n\n# Work with columns\n\n## Select columns\n\nSelecting a subset of columns works essentially the same for both and `dplyr::select()` and `polars.select()` even have the same name. Note that you don't have to use `polars.col()` but can just pass strings in the `polars.select()` method. \n\n::: {.panel-tabset}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  select(bill_length_mm, sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 2\n   bill_length_mm sex   \n            <dbl> <fct> \n 1           39.1 male  \n 2           39.5 female\n 3           40.3 female\n 4           NA   <NA>  \n 5           36.7 female\n 6           39.3 male  \n 7           38.9 female\n 8           39.2 male  \n 9           34.1 <NA>  \n10           42   <NA>  \n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .select(pl.col(\"bill_length_mm\"), pl.col(\"sex\"))\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (344, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>bill_length_mm</th><th>sex</th></tr><tr><td>f64</td><td>str</td></tr></thead><tbody><tr><td>39.1</td><td>&quot;male&quot;</td></tr><tr><td>39.5</td><td>&quot;female&quot;</td></tr><tr><td>40.3</td><td>&quot;female&quot;</td></tr><tr><td>null</td><td>null</td></tr><tr><td>36.7</td><td>&quot;female&quot;</td></tr><tr><td>&hellip;</td><td>&hellip;</td></tr><tr><td>55.8</td><td>&quot;male&quot;</td></tr><tr><td>43.5</td><td>&quot;female&quot;</td></tr><tr><td>49.6</td><td>&quot;male&quot;</td></tr><tr><td>50.8</td><td>&quot;male&quot;</td></tr><tr><td>50.2</td><td>&quot;female&quot;</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n:::\n\n## Rename columns\n\nRenaming columns also works very similarly with the major difference that `polars.rename()` takes a dictionary with mappings of old to new names as input, while `dplyr::rename()` takes variable names via the usual NSE.\n\n::: {.panel-tabset}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  rename(bill_length = bill_length_mm,\n         bill_depth = bill_depth_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island    bill_length bill_depth flipper_length_mm body_mass_g sex   \n   <fct>   <fct>           <dbl>      <dbl>             <int>       <int> <fct> \n 1 Adelie  Torgersen        39.1       18.7               181        3750 male  \n 2 Adelie  Torgersen        39.5       17.4               186        3800 female\n 3 Adelie  Torgersen        40.3       18                 195        3250 female\n 4 Adelie  Torgersen        NA         NA                  NA          NA <NA>  \n 5 Adelie  Torgersen        36.7       19.3               193        3450 female\n 6 Adelie  Torgersen        39.3       20.6               190        3650 male  \n 7 Adelie  Torgersen        38.9       17.8               181        3625 female\n 8 Adelie  Torgersen        39.2       19.6               195        4675 male  \n 9 Adelie  Torgersen        34.1       18.1               193        3475 <NA>  \n10 Adelie  Torgersen        42         20.2               190        4250 <NA>  \n# ℹ 334 more rows\n# ℹ 1 more variable: year <int>\n```\n\n\n:::\n:::\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .rename({\"bill_length_mm\": \"bill_length\",\n           \"bill_depth_mm\" : \"bill_depth\"})\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (344, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length</th><th>bill_depth</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.1</td><td>18.7</td><td>181.0</td><td>3750.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.5</td><td>17.4</td><td>186.0</td><td>3800.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>40.3</td><td>18.0</td><td>195.0</td><td>3250.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>36.7</td><td>19.3</td><td>193.0</td><td>3450.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>55.8</td><td>19.8</td><td>207.0</td><td>4000.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>43.5</td><td>18.1</td><td>202.0</td><td>3400.0</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>49.6</td><td>18.2</td><td>193.0</td><td>3775.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.8</td><td>19.0</td><td>210.0</td><td>4100.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.2</td><td>18.7</td><td>198.0</td><td>3775.0</td><td>&quot;female&quot;</td><td>2009</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n:::\n\n## Mutate columns\n\nTransforming existing columns or creating new ones is an essential part of data analysis. `dplyr::mutate()` and `polars.with_columns()` are the work horses for these tasks. While `dplyr` starts with column names before the expressions that transform columns, `polars` uses the `polars.alias()` method to assign expressions to new columns.\n\n::: {.panel-tabset}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  mutate(ones = 1,\n         bill_length = bill_length_mm / 10,\n         bill_length_squared = bill_length^2) |> \n  select(ones, bill_length_mm, bill_length, bill_length_squared)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 4\n    ones bill_length_mm bill_length bill_length_squared\n   <dbl>          <dbl>       <dbl>               <dbl>\n 1     1           39.1        3.91                15.3\n 2     1           39.5        3.95                15.6\n 3     1           40.3        4.03                16.2\n 4     1           NA         NA                   NA  \n 5     1           36.7        3.67                13.5\n 6     1           39.3        3.93                15.4\n 7     1           38.9        3.89                15.1\n 8     1           39.2        3.92                15.4\n 9     1           34.1        3.41                11.6\n10     1           42          4.2                 17.6\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins \n  .with_columns(pl.lit(1).alias(\"ones\"),\n                (pl.col(\"bill_length_mm\") / 10).alias(\"bill_length\"))\n  .with_columns((pl.col(\"bill_length\") ** 2).alias(\"bill_length_squared\"))\n  .select(pl.col(\"ones\"), pl.col(\"bill_length_mm\"),  \n          pl.col(\"bill_length\"), pl.col(\"bill_length_squared\"))\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (344, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>ones</th><th>bill_length_mm</th><th>bill_length</th><th>bill_length_squared</th></tr><tr><td>i32</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>39.1</td><td>3.91</td><td>15.2881</td></tr><tr><td>1</td><td>39.5</td><td>3.95</td><td>15.6025</td></tr><tr><td>1</td><td>40.3</td><td>4.03</td><td>16.2409</td></tr><tr><td>1</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1</td><td>36.7</td><td>3.67</td><td>13.4689</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>1</td><td>55.8</td><td>5.58</td><td>31.1364</td></tr><tr><td>1</td><td>43.5</td><td>4.35</td><td>18.9225</td></tr><tr><td>1</td><td>49.6</td><td>4.96</td><td>24.6016</td></tr><tr><td>1</td><td>50.8</td><td>5.08</td><td>25.8064</td></tr><tr><td>1</td><td>50.2</td><td>5.02</td><td>25.2004</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n:::\n\n## Relocate columns\n\n`dplyr::relocate()` provides options to change the positions of columns in a data frame, using the same syntax as `dplyr::select()`. In addition, there are the options `.after` and `.before` to provide users with additional shortcuts. \n\nThe recommended way to relocate columns in `polars` is to use the `polars.select()` method, but there are no options as in `dplyr::relocate()`. In fact, the safest way to consistently get the correct order of columns is to explicitly specify them. \n\n::: {.panel-tabset}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  relocate(c(species, bill_length_mm), .before = year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   island    bill_depth_mm flipper_length_mm body_mass_g sex    species\n   <fct>             <dbl>             <int>       <int> <fct>  <fct>  \n 1 Torgersen          18.7               181        3750 male   Adelie \n 2 Torgersen          17.4               186        3800 female Adelie \n 3 Torgersen          18                 195        3250 female Adelie \n 4 Torgersen          NA                  NA          NA <NA>   Adelie \n 5 Torgersen          19.3               193        3450 female Adelie \n 6 Torgersen          20.6               190        3650 male   Adelie \n 7 Torgersen          17.8               181        3625 female Adelie \n 8 Torgersen          19.6               195        4675 male   Adelie \n 9 Torgersen          18.1               193        3475 <NA>   Adelie \n10 Torgersen          20.2               190        4250 <NA>   Adelie \n# ℹ 334 more rows\n# ℹ 2 more variables: bill_length_mm <dbl>, year <int>\n```\n\n\n:::\n:::\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .select(pl.col(\"island\"), pl.col(\"bill_depth_mm\"), \n          pl.col(\"flipper_length_mm\"), pl.col(\"body_mass_g\"), pl.col(\"sex\"), \n          pl.col(\"species\"), pl.col(\"bill_length_mm\"), pl.col(\"year\"))\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (344, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>island</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>species</th><th>bill_length_mm</th><th>year</th></tr><tr><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>str</td><td>str</td><td>f64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Torgersen&quot;</td><td>18.7</td><td>181.0</td><td>3750.0</td><td>&quot;male&quot;</td><td>&quot;Adelie&quot;</td><td>39.1</td><td>2007</td></tr><tr><td>&quot;Torgersen&quot;</td><td>17.4</td><td>186.0</td><td>3800.0</td><td>&quot;female&quot;</td><td>&quot;Adelie&quot;</td><td>39.5</td><td>2007</td></tr><tr><td>&quot;Torgersen&quot;</td><td>18.0</td><td>195.0</td><td>3250.0</td><td>&quot;female&quot;</td><td>&quot;Adelie&quot;</td><td>40.3</td><td>2007</td></tr><tr><td>&quot;Torgersen&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;Adelie&quot;</td><td>null</td><td>2007</td></tr><tr><td>&quot;Torgersen&quot;</td><td>19.3</td><td>193.0</td><td>3450.0</td><td>&quot;female&quot;</td><td>&quot;Adelie&quot;</td><td>36.7</td><td>2007</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Dream&quot;</td><td>19.8</td><td>207.0</td><td>4000.0</td><td>&quot;male&quot;</td><td>&quot;Chinstrap&quot;</td><td>55.8</td><td>2009</td></tr><tr><td>&quot;Dream&quot;</td><td>18.1</td><td>202.0</td><td>3400.0</td><td>&quot;female&quot;</td><td>&quot;Chinstrap&quot;</td><td>43.5</td><td>2009</td></tr><tr><td>&quot;Dream&quot;</td><td>18.2</td><td>193.0</td><td>3775.0</td><td>&quot;male&quot;</td><td>&quot;Chinstrap&quot;</td><td>49.6</td><td>2009</td></tr><tr><td>&quot;Dream&quot;</td><td>19.0</td><td>210.0</td><td>4100.0</td><td>&quot;male&quot;</td><td>&quot;Chinstrap&quot;</td><td>50.8</td><td>2009</td></tr><tr><td>&quot;Dream&quot;</td><td>18.7</td><td>198.0</td><td>3775.0</td><td>&quot;female&quot;</td><td>&quot;Chinstrap&quot;</td><td>50.2</td><td>2009</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n:::\n\n# Work with groups of rows\n\n## Simple summaries by group\n\nLet's suppose we want to compute summaries by groups such as means or medians. Both packages are very similar again: on the R side you have `dplyr::group_by()` and `dplyr::summarize()`, while on the Python side you have `polars.group_by()` and `polars.agg()`. \n\nNote that `dplyr::group_by()` also automatically arranges the results by the group, so the reproduce the results of `dplyr`, we need to add `polars.sort()` to the chain. \n\n::: {.panel-tabset}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  group_by(island) |> \n  summarize(bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  island    bill_depth_mean\n  <fct>               <dbl>\n1 Biscoe               15.9\n2 Dream                18.3\n3 Torgersen            18.4\n```\n\n\n:::\n:::\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .group_by(\"island\")\n  .agg([pl.mean(\"bill_depth_mm\").alias(\"bill_depth_mean\")])\n  .sort(\"island\")\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>island</th><th>bill_depth_mean</th></tr><tr><td>str</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Biscoe&quot;</td><td>15.87485</td></tr><tr><td>&quot;Dream&quot;</td><td>18.344355</td></tr><tr><td>&quot;Torgersen&quot;</td><td>18.429412</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n:::\n\n## More complicated summaries by group\n\nTypically, you want to create multiple different summaries by groups. `dplyr` provides a lot of flexibility to create new variables on the fly, while `polars` seems to be a bit more restrictive. For instance, to compute the share of female penguins by group, it makes more sense to create an `ìs_female` indicator column using `polars` because `polars.mean()` does not accept expressions as inputs. \n\n::: {.panel-tabset}\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  group_by(island) |> \n  summarize(count = n(),\n            bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE),\n            flipper_length_median = median(flipper_length_mm, na.rm = TRUE),\n            body_mass_sd = sd(body_mass_g, na.rm = TRUE),\n            share_female = mean(sex == \"female\", na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n  island   count bill_depth_mean flipper_length_median body_mass_sd share_female\n  <fct>    <int>           <dbl>                 <dbl>        <dbl>        <dbl>\n1 Biscoe     168            15.9                   214         783.        0.491\n2 Dream      124            18.3                   193         417.        0.496\n3 Torgers…    52            18.4                   191         445.        0.511\n```\n\n\n:::\n:::\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\n(penguins\n  .with_columns((pl.when(pl.col(\"sex\") == \"female\").then(1)\n                  .when(pl.col(\"sex\").is_null()).then(None)\n                  .otherwise(0)).alias(\"is_female\"))\n  .group_by(\"island\")\n  .agg([\n    pl.count().alias(\"count\"),\n    pl.mean(\"bill_depth_mm\").alias(\"bill_depth_mean\"),\n    pl.median(\"flipper_length_mm\").alias(\"flipper_length_median\"),\n    pl.std(\"body_mass_g\").alias(\"body_mass_sd\"),\n    pl.mean(\"is_female\").alias(\"share_female\")\n  ])\n  .sort(\"island\")\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 6)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>island</th><th>count</th><th>bill_depth_mean</th><th>flipper_length_median</th><th>body_mass_sd</th><th>share_female</th></tr><tr><td>str</td><td>u32</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Biscoe&quot;</td><td>168</td><td>15.87485</td><td>214.0</td><td>782.855743</td><td>0.490798</td></tr><tr><td>&quot;Dream&quot;</td><td>124</td><td>18.344355</td><td>193.0</td><td>416.644112</td><td>0.495935</td></tr><tr><td>&quot;Torgersen&quot;</td><td>52</td><td>18.429412</td><td>191.0</td><td>445.10794</td><td>0.510638</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n:::\n\n## Conclusion\n\nThis post highlights syntactic similarities and differences across R's `dplyr` and Python's `polars` packages. Two key points emerge: (i) `dplyr` heavily relies on NSE to enable a syntax that refrains from using strings and column selectors, something that is not possible in Python; (ii) creating new variables in `dplyr` is read from left to right (the new variable name comes first, the definition later), while it is the other way around in `polars` (definition first, new variable name later). I want to close this post by emphasizing that both languages and packages have their own merits and I won't strictly recommend one over the other - maybe in another post :smile:\n\n[^1]: See the unifying principles of the tidyverse: [https://design.tidyverse.org/unifying.html](https://design.tidyverse.org/unifying.html).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}