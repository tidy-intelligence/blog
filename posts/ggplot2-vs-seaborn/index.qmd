---
title: "Tidy Data Visualization: ggplot2 vs seaborn"
description: "A comparison of implementations of the grammar of graphics in R and Python."
metadata:
  pagetitle: "Tidy Data Visualization: ggplot2 vs seaborn"
author: "Christoph Scheuch"
date: "2024-01-16" 
image: thumbnail.png
image-alt: A bright and friendly office setting with two equally sized screens placed centrally on a desk. Each screen displays a simple line chart without any text or numbers. The desk is placed directly on a beach, with no walls or windows, allowing an unobstructed view of the sea and some seagulls in the background. The scene conveys a peaceful and productive atmosphere, with natural beach scenery surrounding the workspace. Created with DALL-E 3.
draft: true
---

`ggplot2` is based on Leland Wilkinson"s Grammar of Graphics, a set of principles for creating consistent and effective statistical graphics, and was developed by Hadley Wickham. The package is a cornerstone of the R community and integrates seamlessly with other `tidyverse` packages. 

`seaborn`, on the other hand, is a Python package that ...

The types of plots that I chose for the comparison heavily draw on the examples given in [R for Data Science](https://r4ds.hadley.nz/data-visualize) - an amazing resource if you want to get started with data visualization. 

## Loading packages and data

We start by loading the main packages of interest and the popular `penguins` data that comes with `seaborn` and exists as an R package. We then use the `penguins` data frame as the data to compare all functions and methods below. Note that I drop all rows with missing values because I don't want to get into related messages in this post. 

::: {.panel-tabset}
### R
```{r}
library(ggplot2)
library(palmerpenguins)

penguins <- na.omit(palmerpenguins::penguins)
```
### Python
```{python}
import seaborn as sns

penguins = sns.load_dataset("penguins")

sns.set_theme(style="whitegrid")
```
::: 

## A full-blown example

Let"s start with an advancved example that combines many different aesthetics at the same time: we plot two columns against each other, use color and shape aesthetics do differentiate species, include separate regression lines for each species, manually set nice labels, and use a theme. Except for the quotation of column names, `seaborn` has exactly the same syntax as `ggplot2` - this is remarkable!

::: {.panel-tabset}
### R
```{r}
ggplot(penguins, 
       aes(x = bill_length_mm, y = bill_depth_mm, 
           color = species, shape = species)) + 
  geom_point() + 
  geom_smooth(method = "lm", formula = "y ~ x") +
  labs(x = "Bill length (mm)", y = "Bill width (mm)", 
       title = "Bill length vs. bill width", 
       subtitle = "Using geom_point and geom_smooth of the ggplot2 package",
       color = "Species", shape = "Species") +
  theme_minimal()
```
### Python
```{python}
# TODO: add legend title?
# TODO: check " replacements that happened by mistake
(sns.lmplot(
    data = penguins,
    x = "bill_length_mm", y = "bill_depth_mm", 
    hue = "species", markers = ["o", "s", "^"], fit_reg = True, scatter_kws = {"s": 50}
  )
  .set_axis_labels("Bill length (mm)", "Bill width (mm)")
  .fig.suptitle("Bill length vs. bill width")
)
```
::: 

## Visualizing Distributions

### A categorical variable

Let"s break down the similarity in smaller steps by focussing on simpler examples. If you have a categorical variable and want to compare its relevance in your data, then `geom_bar()` is your friend. 

::: {.panel-tabset}
### R
```{r}
ggplot(penguins, 
       aes(x = island)) +
  geom_bar()
```
### Python
```{python}
sns.countplot(
  data=penguins, 
  x="island",
  order=penguins["island"].value_counts().index
)
```
::: 

### A numerical variable

If you have a numerical variable, usually histograms are a good starting point to get a better feeling for the distribution of your data. `geom_histogram()` with options to control bin widths or number of bins is the aesthetic for this task.

::: {.panel-tabset}
### R
```{r}
ggplot(penguins, 
       aes(x = bill_length_mm)) +
  geom_histogram(binwidth = 2)
```
### Python
```{python}
sns.histplot(
  data = penguins, 
  x = "bill_length_mm", 
  binwidth = 2
)
```
::: 

Both packages also support the `geom_density()` geom to plot density curves, but I personally wouldn"t recommend to start with densities because they are estimated curves that might obscure underlying data features. 

## Visualizing Relationships

### A numerical and a categorical variable

To visualize relationships, you need to have at least two columns. If you have a numerical and a categorical variable, then histograms or densities with groups are a good starting point. The next example illustrates the use of `geom_density()`. 

Note that `seaborn` still uses the historical `size` option and not the new `linewidth` wording (see this [blog post](https://www.tidyverse.org/blog/2022/11/ggplot2-3-4-0/) here). Maybe this will change in the future, so keep an eye on [this issue](https://github.com/has2k1/seaborn/issues/742) to stay up to date.

::: {.panel-tabset}
### R
```{r}
ggplot(penguins, 
       aes(x = body_mass_g, color = species, fill = species)) +
  geom_density(linewidth = 0.75, alpha = 0.5)
```
### Python
```{python}
sns.kdeplot(
  data = penguins, 
  x = "body_mass_g", 
  hue = "species", 
  fill = True, common_norm = False, alpha = 0.5, linewidth = 0.75
)
```
:::

### Two categorical columns

Stacked bar plots are a good way to display the relationship between two categorical columns. `geom_bar()` with the `position` argument is your aesthetic of choice for this task. Note that you can easily switch to counts by using `position = "identity"` instead of relative frequencies as in the example below. 

::: {.panel-tabset}
### R
```{r}
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = "fill")
```
### Python
```{python}
sns.histplot(
  data = penguins, 
  x = "species", 
  hue = "island", multiple = "fill", stat = "percent", shrink = .8
)
```
::: 

### Two numerical columns

Scatter plots and regression lines are definitely the most common approach for visualizing the relationship between two numerical columns. Here, the `size` parameter controls the size of the shapes that you use for the data points. See the first visualization example if you want to see again how to add a regression line.   

::: {.panel-tabset}
### R
```{r}
ggplot(penguins, 
       aes(x = bill_length_mm, y = flipper_length_mm)) +
  geom_point(size = 2)
```
### Python
```{python}
sns.scatterplot(
  data = penguins, 
  x = "bill_length_mm", y = "flipper_length_mm", 
  s = 50
)
```
::: 

### Three or more columns

You can include more information by mapping columns to additional aesthetics. For instance, we can map colors and shapes to species and create separate plots for each island by using facets. Facets are actually a great way to extend your figures, so I highly recommend playing around with them using your own data. 

::: {.panel-tabset}
### R
```{r}
ggplot(penguins, 
       aes(x = bill_length_mm, y = flipper_length_mm)) +
  geom_point(aes(color = species, shape = species)) +
  facet_wrap(~island)
```
### Python
```{python}
(sns.FacetGrid(data = penguins, col="island", hue="species", margin_titles=True)
  .map(sns.scatterplot, "bill_length_mm", "flipper_length_mm", alpha = .7)
  .add_legend()
)
```
::: 

## Saving Plots

As a final comparison, let us look at saving plots. Again, the implementations are virtually the same across both packages with the same function name and corresponding options. 

::: {.panel-tabset}
### R
```{r}
#| eval: false
penguins_figure <- penguins |> 
  ggplot(aes(x = bill_length_mm, y = flipper_length_mm)) + 
  geom_point()

ggsave(penguins_figure, filename = "penguins-figure.png",
       width = 7, height = 5, dpi = 300)
```
### Python
```{python}
#| eval: false
penguins_figure = sns.scatterplot(
  data = penguins, 
  x = "bill_length_mm", y = "flipper_length_mm"
)
penguins_figure.figure.set_size_inches(7, 5)
penguins_figure.figure.savefig("penguins-figure.png", dpi = 300)
```
::: 

## Conclusion

In terms of syntax, `ggplot2` and `seaborn` are considerably different. `ggplot2` follows the basic syntax of 
```markdown
ggplot(data = <DATA>, aes(x = <X-VAR>, y = <Y-VAR>)) +
  geom_<PLOT-TYPE>() +
  other_layers
```
and `seaborn` follows the syntax
```markdown
sns.<PLOT-FUNCTION>(data = <DATA>, x = "<X-VAR>", y = "<Y-VAR>", other_parameters).
```
I think this difference comes from different philosophies. `ggplot2` focuses on layering and mapping data to aesthetics, whereas `seaborn` is more about providing a variety of complex plot types easily. Moreover, `ggplot2` is designed to work considerably well with tidy data (see my [blog post on tidy data](../tidy-data-a-recipe-for-efficient-data-analysis/index.qmd)), whereas `seaborn` is more flexible with data formats.

Both offer extensive customization options, but they are implemented differently. `ggplot2` uses additional layers and scales and hence allows for a large ecosystem(see, for instance, [this repo](https://github.com/erikgahner/awesome-ggplot2) for a collection of links), while `seaborn` relies on the customization options of `matplotlib` and its own parameters. I think both approaches are powerful and have their unique advantages, and the choice between them often depends on your programming language preference and specific requirements of the data visualization task.
