---
title: "Sakura Visualizations"
description: "Visualizing first and full cherry blossom bloom dates for Japanese regions using R and Python"
metadata:
  pagetitle: "Sakura Visualizations"
author: "Christoph Scheuch"
date: "2024-05-27" 
image: thumbnail.png
image-alt: An old school beige-green Chinese bus and a pair of pliers lying on the ground side by side. The scene is well-lit with a vibrant, clear blue sky overhead and lush green grass underfoot. Created with DALL-E.
categories: 
  - R
  - Python
  - Visualization
format:
  html: 
    fig-width: 12
    fig-height: 8
    fig-dpi: 300
---


## Loading packages and data

We start by loading the main packages of interest and the popular `palmerpenguins` package that exists for both R and Python. We then use the `penguins` data frame as the data to compare all functions and methods below. 

::: {.panel-tabset}
### R
```{r}
#| message: false
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
library(janitor)
```
### Python
```{python}
import pandas as pd
from pandas import to_datetime
import janitor
from plotnine import *

# TODO: translate data import to Python
# TODO: reformat Python code (more whitespace!)
# TODO: Write text around code chunks
# TODO: ggrepel?
```
:::

## Download and prepare data

::: {.panel-tabset}
### R
```{r}
#| message: false
# Sakura dates by region
# https://www.kaggle.com/datasets/ryanglasnapp/japanese-cherry-blossom-data
sakura_first_bloom_dates <- read_csv("https://raw.githubusercontent.com/christophscheuch/data-viz-japan/main/data/sakura_first_bloom_dates.csv") |> 
  clean_names()
sakura_full_bloom_dates <- read_csv("https://raw.githubusercontent.com/christophscheuch/data-viz-japan/main/data/sakura_full_bloom_dates.csv") |> 
  clean_names()
  
# Process first bloom dates
first_bloom_long <- sakura_first_bloom_dates |>
  select(-x30_year_average_1981_2010, -notes) |>
  rename(location = site_name, is_currently_observed = currently_being_observed) |>
  pivot_longer(cols = -c(location, is_currently_observed), names_to = "year", values_to = "first_bloom")

# Process full bloom dates
full_bloom_long <- sakura_full_bloom_dates |>
  select(-x30_year_average_1981_2010, -notes) |>
  rename(location = site_name, is_currently_observed = currently_being_observed) |>
  pivot_longer(cols = -c(location, is_currently_observed), names_to = "year", values_to = "full_bloom")

# Combine and calculate additional columns
sakura_dates <- first_bloom_long |>
  full_join(full_bloom_long, by = c("location", "year", "is_currently_observed")) |>
  mutate(year = as.integer(gsub("x", "", year)),
         first_bloom_day = as.integer(first_bloom - as.Date(paste(year, "-01-01", sep = ""))),
         full_bloom_day = as.integer(full_bloom - as.Date(paste(year, "-01-01", sep = ""))),
         time_to_full_bloom = as.integer(full_bloom - first_bloom))
```
### Python
```{python}
sakura_first_bloom_dates = pd.read_csv("https://raw.githubusercontent.com/christophscheuch/data-viz-japan/main/data/sakura_first_bloom_dates.csv").clean_names()
sakura_full_bloom_dates = pd.read_csv("https://raw.githubusercontent.com/christophscheuch/data-viz-japan/main/data/sakura_full_bloom_dates.csv").clean_names()
  
# Process first bloom dates
first_bloom_long = (sakura_first_bloom_dates
  .drop(columns=["30_year_average_1981_2010", "notes"])
  .rename(
    columns={"site_name": "location", "currently_being_observed": "is_currently_observed"}
  )
  .melt(id_vars=["location", "is_currently_observed"], var_name="year", value_name="first_bloom")
)

# Process full bloom dates
full_bloom_long = (sakura_full_bloom_dates
  .drop(columns=["30_year_average_1981_2010", "notes"])
  .rename(
    columns={"site_name": "location", "currently_being_observed": "is_currently_observed"}
  )
  .melt(id_vars=["location", "is_currently_observed"], var_name="year", value_name="full_bloom")
)

# Combine and calculate additional columns
sakura_dates = (first_bloom_long
  .merge(full_bloom_long, on=["location", "year", "is_currently_observed"], how="outer")
  .assign(
    year=lambda df: df["year"].astype(int),
    first_bloom=lambda df: pd.to_datetime(df["first_bloom"]),
    full_bloom=lambda df: pd.to_datetime(df["full_bloom"]),
    first_bloom_day=lambda df: (df["first_bloom"] - pd.to_datetime(df["year"].astype(str) + "-01-01")).dt.days,
    full_bloom_day=lambda df: (df["full_bloom"] - pd.to_datetime(df["year"].astype(str) + "-01-01")).dt.days,
    time_to_full_bloom=lambda df: (df["full_bloom"] - df["first_bloom"]).dt.days
  )
)
```
:::


::: {.panel-tabset}
### R
```{r}
#| message: false
# Sort locations into regions (used ChatGPT for labeling)
# https://en.wikipedia.org/wiki/List_of_regions_of_Japan
# Location longitudes and latitudes
# https://github.com/Yuriko-Schumacher/statistical-analysis-of-cherry-blossom-first-bloom-date/tree/main/data
observatory_locations <- read_csv("https://raw.githubusercontent.com/Yuriko-Schumacher/statistical-analysis-of-cherry-blossom-first-bloom-date/main/data/observatory-locations.csv")
locations_regions <- read_csv("https://raw.githubusercontent.com/christophscheuch/data-viz-japan/main/data/locations_region.csv") 

southern_islands <- c("Naze", "Ishigaki Island", "Miyakojima", "Naha", "Minami Daito Island")

locations_regions <- locations_regions |> 
  mutate(region = if_else(location %in% southern_islands, "Ryukyu Islands", region))
```
### Python
```{python}
observatory_locations = pd.read_csv("https://raw.githubusercontent.com/Yuriko-Schumacher/statistical-analysis-of-cherry-blossom-first-bloom-date/main/data/observatory-locations.csv")
locations_regions = pd.read_csv("https://raw.githubusercontent.com/christophscheuch/data-viz-japan/main/data/locations_region.csv")

southern_islands = ["Naze", "Ishigaki Island", "Miyakojima", "Naha", "Minami Daito Island"] 

locations_regions = (locations_regions
  .assign(
    region = lambda x: x['region'].where(~x['location'].isin(southern_islands), "Ryukyu Islands")
  )
)
```

:::

::: {.panel-tabset}
### R
```{r}
#| message: false
sakura_data <- sakura_dates |> 
  left_join(observatory_locations, join_by(location)) |> 
  left_join(locations_regions, join_by(location)) |> 
  filter(is_currently_observed == TRUE &
          year >= 1954 &
          !is.na(full_bloom_day) & 
          !is.na(time_to_full_bloom))
```
### Python
```{python}
sakura_data = (sakura_dates
  .merge(observatory_locations, on = 'location', how = 'left')
  .merge(locations_regions, on = 'location', how = 'left')
  .query('is_currently_observed == True & year >= 1954 & full_bloom_day.notna() & time_to_full_bloom.notna()')
)
```
:::

## Set theme and color scheme

Set figure size in theme for plotnine works best to control output size

::: {.panel-tabset}
### R
```{r}
theme_set(theme_classic(base_size = 16, base_family = "Palatino")) 

theme_update(
  panel.grid.minor = element_blank(),
  panel.grid.major = element_blank(),
  strip.background = element_blank(),
  axis.title.x = element_blank(), 
  axis.title.y = element_blank(),
  axis.ticks = element_blank(),
  axis.line = element_blank()
)

colors <- c("#ffb7c5", "#b7c5ff", "#c5ffb7")
breaks_year <- seq(1950, 2030, by = 20)
```
### Python
```{python}
theme_set(theme_classic(base_size = 16, base_family = "Palatino") + theme(figure_size = (12, 8)))

theme_update(
  panel_grid_minor = element_blank(),
  panel_grid_major = element_blank(),
  strip_background = element_blank(),
  axis_title_x = element_blank(),
  axis_title_y = element_blank(),
  axis_ticks = element_blank(),
  axis_line = element_blank()
)

colors = ["#ffb7c5", "#b7c5ff", "#c5ffb7"]
breaks_year = range(1950, 2031, 20)
```
:::

## Time to full bloom per region

::: {.panel-tabset}
### R
```{r}
#| message: false
sakura_data |> 
  ggplot(aes(x = year, y = full_bloom_day)) +
  geom_point(color = colors[1], alpha = 0.75, size = 2) +
  geom_smooth(method = lm, se = FALSE,
              color = colors[2], linewidth = 2) +
  facet_wrap(~region, nrow = 1) + 
  labs(title = expression("Day of the year with peak cherry tree blossom for regions in Japan since 1953"),
       subtitle = "Cities in northern regions Hokkaidō and Honshū exhibit earlier full blooms, while Ryukyu Islands even later",
       x = NULL, y = NULL) +
  scale_x_continuous(breaks = breaks_year) +
  scale_y_continuous(breaks = seq(30, 150, by = 30))
```

### Python

`linewidth` is still `size` in plotnine

```{python}
#| message: false
#| warning: false
(ggplot(sakura_data, 
         aes(x = "year", y = "full_bloom_day"))
  + geom_point(color = colors[0], alpha = 0.75, size = 2)
  + geom_smooth(method = "lm", se = False, 
                color = colors[1], size = 2)
  + facet_wrap("~region", nrow = 1)
  + labs(title = "Day of the year with peak cherry tree blossom for regions in Japan since 1953",
         subtitle = "Cities in northern regions Hokkaidō and Honshū exhibit earlier full blooms, while Ryukyu Islands even later",
         x = None, y = None)
  + scale_x_continuous(breaks = breaks_year)
  + scale_y_continuous(breaks = range(30, 151, 30))
)
```
:::

## Time between first and full bloom

::: {.panel-tabset}
### R
```{r}
#| message: false
sakura_data |>
  ggplot(aes(x = year, y = time_to_full_bloom)) +
  geom_point(color = colors[1], alpha = 0.75) +
  geom_smooth(method = lm, se = FALSE,
              color = colors[2], linewidth = 2) +
  facet_wrap(~region, nrow = 1) +
  labs(title = "Days from blossoms opening to peak bloom for regions in Japan",
       subtitle = "Hokkaidō exhibits the shortest and decreasing blooming periods, while Kyūshū's and Ryukyu's have lengthened",
       x = NULL, y = NULL) +
  scale_x_continuous(breaks = breaks_year)
```
### Python
```{python}
#| message: false
#| warning: false
(ggplot(sakura_data, 
        aes(x = "year", y = "time_to_full_bloom"))
  + geom_point(color = colors[0], alpha = 0.75)
  + geom_smooth(method = "lm", se = False, 
                color = colors[1], size = 2)
  + facet_wrap("~region", nrow = 1)
  + labs(title = "Days from blossoms opening to peak bloom for regions in Japan",
         subtitle = "Hokkaidō exhibits the shortest and decreasing blooming periods, while Kyūshū's and Ryukyu's have lengthened",
          x = None, y = None)
  + scale_x_continuous(breaks = breaks_year)
)
```
:::
