---
title: "Analyzing Seasonality in DAX Returns"
description: "An evaluation .. using R"
metadata:
  pagetitle: "Analyzing Seasonality in DAX Returns"
author: "Christoph Scheuch"
date: "2023-11-28" 
image: thumbnail.png
---

<!-- TODO: write description -->
<!-- TODO: exlcude outliers from tests -->

[Seasonalcharts.de](https://www.seasonalcharts.de/classics_dax.html) claims that stock indices exhibit persistent seasonality that may be exploited through an appropriate trading strategy. As part of a job application, I had to replicate the seasonal pattern for the DAX and then test whether this pattern entails a profitable trading strategy. To sum up, I indeed find that a trading strategy that holds the index only over a specific season outperforms the market significantly, but these results might be driven by a few outliers. Note that the post below references an opinion and is for information purposes only. I do not intend to provide any investment advice.

The code is structured in a way that allows for a straight-forward replication of the methodoloty for other indices. The post uses the following packages:

```{r}
library(tidyverse)
library(tidyquant)
library(frenchdata)
library(scales)
```

## Data Preparation

First, download data from yahoo finance using the tidyquant package. Note that the DAX was officially launched in July 1988, so this is where our sample starts.

```{r}
dax_raw <- tq_get(
  "^GDAXI", get = "stock.prices", 
  from = "1988-07-01", to = "2023-10-30"
) 
```

Then, select only date and the adjusted price (i.e., closing price after adjustments for all applicable splits and dividend distributions) as the relevant variables and compute summary statistics to check for missing or weird values. The results are virtually the same if I use unadjusted closing prices.

```{r} 
dax <- dax_raw |>
  select(date, price = adjusted)
```

I replace the missing values by the last available index value.

```{r}
dax <- dax |>
  arrange(date) |>
  fill(price, .direction = "down")
```

As a immediate plausibility check, I plot the DAX over the whole sample period.

```{r}
dax |>
  ggplot(aes(x = date, y = price)) +
  geom_line() + 
  labs(x = "", y = "Adjusted Price") +
  scale_x_date(expand = c(0, 0), breaks = "5 years") +
  scale_y_continuous(breaks = pretty_breaks()) + 
  theme_classic()
```

The main idea of Seasonalcharts is to implement the strategy proposed by [Jacobsen and Bouman (2002)](https://www.jstor.org/stable/3083268?seq=1#metadata_info_tab_contents) and [Jacobsen and Zhan (2018)](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2154873) which they label ‘The Halloween Indicator’ (or ‘Sell in May Effect’). The main finding of these papers is that stock indices returns seem significantly lower duing the May-October period than during the remainder of the year. The corresponding trading strategy holds an index during the months November-April, but holds the risk-free asset in the May-October period.

To replicate their approach (and avoid noise in the daily data), we focus on monthly returns from now on.

```{r}
dax_monthly <- dax |>
  mutate(year = year(date),
         month = factor(month(date))) |>
  group_by(year, month) |>
  filter(date == max(date)) |>
  ungroup() |>
  arrange(date) |>
  mutate(ret = price / lag(price) - 1) |>
  drop_na()
```

And as usual in empirical asset pricing, we do not care about raw returns, but returns in excess of the risk-free asset. I simply add the European risk free rate from the Fama-French data library as the corresponding reference point. Of course, one could use other measures for the risk-free rate, but the impact on the results won’t be substantial.

```{r}
factors_ff3_monthly_raw <- download_french_data("Fama/French 3 Factors")

risk_free_monthly <- factors_ff3_monthly_raw$subsets$data[[1]] |>
  mutate(
    year = year(ymd(str_c(date, "01"))),
    month = factor(month(ymd(str_c(date, "01")))),
    rf = as.numeric(RF) / 100,
    .keep = "none"
  )

dax_monthly <- dax_monthly |> 
  left_join(risk_free_monthly, join_by(year, month)) |> 
  mutate(ret_excess = ret - rf)
```

## Graphical Evidence for Seasonality

We start by first plotting the average returns for each month. 

```{r}
dax_monthly |> 
  group_by(month) |> 
  summarize(ret = mean(ret)) |> 
  ggplot(aes(x = month, y = ret, fill = ret > 0)) +
  geom_col() +
  scale_y_continuous(labels = percent) + 
  labs(
    x = "Month", y = "Average DAX Return", 
    title = "Average monthly DAX returns between 1988 and 2023"
  ) +
  theme(legend.position = "none")
```

The figure shows negative returns for June, August, and September, while all other months exhibit positive returns. However, it makes more sense to look at distributions instead of simple means, which might be heavily influenced by outliers. To illustrate distributions, I follow [Cedric Scherer](https://www.cedricscherer.com/2021/06/06/visualizing-distributions-with-raincloud-plots-and-how-to-create-them-with-ggplot2/) and use raincloud plots. which combine halved violin plot, a box plot, and the raw data as some kind of scatter. These plots hence provide detailed visualizations of the distributions. 

```{r}
dax_monthly |> 
  ggplot(aes(x = month, y = ret, group = month)) + 
  ggdist::stat_halfeye(
    adjust = .5, width = .6, .width = 0, justification = -.3, point_colour = NA
    ) + 
  geom_boxplot(
    width = .25, outlier.shape = NA
    ) +
  stat_summary(
    fun = mean, geom="point", color = "red", fill = "red"
    ) +
  geom_point(
    size = 1.5, alpha = .2, position = position_jitter(seed = 42, width = .1)
    ) +
  geom_hline(aes(yintercept = 0), linetype = "dashed") +
  labs(
    x = "Month", y = "DAX Return", 
    title = "Raincloud plots of monthly DAX returns between 1988 and 2023",
    subtitle = "Red dots indicate means"
  ) 
```

The figure suggests that August and September exhibit considerable negative outliers. 

## Evaluating Trading Strategies

Let us now take a look at the average excess returns per month. I also add the standard deviation, 5% and 95% quantiles, and t-statistic of a t-test of the null hypothesis that average returns are zero in a given month.

```{r}
dax_monthly |>
  drop_na(ret_excess) |> 
  group_by(Month = month) |>
  summarize(
    Mean = mean(ret_excess),
    SD = sd(ret_excess),
    Q05 = quantile(ret_excess, 0.05),
    Q95 = quantile(ret_excess, 0.95),
    `t-Statistic` = sqrt(n()) * mean(ret_excess) / sd(ret_excess)
  )
```

August and September seem to usually exhibit negative excess returns with an average of about -3% (statistically significant) over all years, while April and November are the only months that tend to exhibit statistically significant positive excess returns. For a graphical illustration of the above table, I complement it with boxplots for each month. The takeaway is essentially the same, but we can see that August and September exhibit a couple of outliers that might considerably drive the results.

Let us proceed to test for the presence of statistically significant excess returns due to seasonal patterns. In the above table, I only test for significance for each month seperately. To test for positive returns in a joint model, I regress the monthly excess returns on month indicators. Note that I always adjust the standard errors to be heteroskedasticity robust.

```{r}
summary(lm(ret_excess ~ month, data = dax_monthly))
```

Seems like August and September have on average indeed lower returns than January (which is the omitted reference point in this regression). Note that the size of the coefficients from the regression are the same as in the table above (i.e., constant plus coefficient). Next, I follow Jacobsen and Bouman (2002) and simply regression excess returns on dummies that indicate specific seasons, i.e., I estimate the model 

$$ y_t=\alpha + \beta D_t + \epsilon_t, $$ 

where $D_t$ is a dummy variable equal to one for the months in a specific season and zero otherwise. I consider both the ‘Halloween’ season (where the dummy is one for November-April) and a `Seasonality’ season which only excludes July-September (and the dummy is one for October-June). If \(D_t\) is statistically significant and positive for the corresponding season, then I take this as evidence for the presence of seasonality effects.

```{r}
halloween_months <- c(11, 12, 1, 2, 3, 4)
seasonality_months <- c(10, 11, 12, 1, 2, 3, 4, 5, 6)
dax_monthly <- dax_monthly |>
  mutate(halloween = if_else(month %in% halloween_months, 1L, 0L),
         seasonality = if_else(month %in% seasonality_months, 1L, 0L))
```

The first model considers the 'Halloween' effect:

```{r}
summary(lm(ret_excess ~ halloween, data = dax_monthly))
```

I indeed find evidence that excess returns are higher during the months November-April relative to the remaining months. Let us take this spiel even further by adding even more months:

```{r}
summary(lm(ret_excess ~ seasonality, data = dax_monthly), robust = TRUE)
```

The effect seems to be even stronger if I also include October, May and June.

As a last step, let us compare five different strategies: (i) buy and hold the index over the full year, (ii) go long in the index outside of the Halloween season and otherwise hold the risk-free asset, (iii) go long in the index outside of the Halloween season and otherwise short the index, (iv) buy the index outside of the extended seasonality period and otherwise invest in the risk-free asset, and (v) go long in the index outside of the extended seasonality period and short the index otherwise. Below I compare the returns of the three different strategies on an annual basis:

```{r}
dax_monthly <- dax_monthly |>
  mutate(ret_excess_halloween = if_else(halloween == 1, ret, rf),
         ret_excess_halloween_short = if_else(halloween == 1, ret, -ret),
         ret_excess_seasonality = if_else(seasonality == 1, ret, rf),
         ret_excess_seasonality_short = if_else(seasonality == 1, ret, -ret))
```

Which of these strategies might constitute a better investment opportunity? For a very simple assessment, let us compute the corresponding Sharpe ratios. Note that I annualize Sharpe ratios by multiplying them with $\sqrt{12}$ which strictly speaking only works under IID distributed returns (which is typically unlikely to be the case), but which suffices for the purpose of this post.

```{r}
sharpe_ratio <- function(x) {
  sqrt(12) *  mean(x) / sd(x)
}

dax_monthly |>
  drop_na() |> 
  arrange(date) |>
  summarize(`Buy and Hold` = sharpe_ratio(ret_excess),
            `Seasonality` = sharpe_ratio(ret_excess_seasonality),
            `Seasonality-Short` = sharpe_ratio(ret_excess_seasonality_short),
            `Halloween` = sharpe_ratio(ret_excess_halloween),
            `Halloween-Short` = sharpe_ratio(ret_excess_halloween_short))
```

