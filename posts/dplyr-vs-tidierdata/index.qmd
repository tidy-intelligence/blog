---
title: "Tidy Data Manipulation: dplyr vs TidierData"
description: "A comparison of R's dplyr and Julia's TidierData data manipulation packages"
metadata:
  pagetitle: "Tidy Data Manipulation: dplyr vs TidierData"
author: "Christoph Scheuch"
date: "2024-01-09" 
image: thumbnail.png
image-alt: A standard plastic broom stands upright on a lush green lawn, with its long handle and bristles clearly visible. Beside it is a large pair of pliers, about half the size of the broom, with detailed rubber handles. The background shows a serene landscape, with a sparkling lake visible in the distance, surrounded by gentle hills and a clear blue sky. Created with DALL-E 3.
categories: 
  - R
  - Julia
  - Manipulation
---

```{r}
#| echo: false
#| message: false
# Note that this code chunk is only required because of a bug with JuliaCall that prevents julia_setup() from finding the installation: https://github.com/quarto-dev/quarto-cli/issues/7055
JuliaCall::julia_setup("/Applications/Julia-1.9.app/Contents/Resources/julia/bin/")
```

There are a myriad of options to perform essential data manipulation tasks in R and Julia. However, if we want to do tidy data science in R, there is a clear forerunner: `dplyr`. In the world of Julia, `TidierData` is a relatively new kid on the block that allows R users to dabble in Julia without learning a lot of new syntax. In this blog post, I illustrate their syntactic similarities and highlight differences between these two packages that emerge for a few key tasks. 

Before we dive into the comparison, a short introduction to the packages: the `dplyr` package in R allows users to refer to columns without quotation marks due to its implementation of non-standard evaluation (NSE). NSE is a programming technique used in R that allows functions to capture the expressions passed to them as arguments, rather than just the values of those arguments. The primary goal of NSE in the context of `dplyr` is to create a more user-friendly and intuitive syntax. This makes data manipulation tasks more straightforward and aligns with the general philosophy of the `tidyverse` to make data science faster, easier, and more fun.^[See the unifying principles of the tidyverse: [https://design.tidyverse.org/unifying.html](https://design.tidyverse.org/unifying.html).]

`TidierData` is a 100% Julia implementation of the `dplyr` and `tidyr` R packages with three goals: (i) stick as closely to the `tidyverse` syntax as possible, so that R users find it easier to switch; (ii) make broadcasting^[Broadcasting expands singleton dimensions in array arguments to match the corresponding dimension in the other array without using extra memory.] mostly invisible, so that many functions are automatically vectorized for users; (iii) make scalars and tuples mostly interchangeable, so that users can provide a scalar or a tuple as arguments as they see fit. Check out the [package website](https://tidierorg.github.io/TidierData.jl/latest/) for more information, in particular with respect to the features of Julia.

## Loading packages and data

We start by loading the main packages of interest and the popular `palmerpenguins` package that exists for both R and Julia. Note that packages in Julia follow a Pascal case convention, so we have `TidierData` and `PalmerPenguins`. We then use the `penguins` data frame as the data to compare all functions and methods below. Note that `ENV["LINES"] = 19` sets the print output of Julia data frames to show only 10 rows.^[In Julia, setting the number of rows to display for all DataFrames globally isn't straightforward as there isn't a direct global setting for this in the 
`DataFrame` package. `ENV["COLUMNS"]` or `ENV["LINES"]` control the display based on the size of your terminal.]
 
::: {.panel-tabset}
### dplyr
```{r}
#| message: false
library(dplyr)
library(palmerpenguins)

penguins <- palmerpenguins::penguins
```
### TidierData
```{julia}
#| output: false
using TidierData
using PalmerPenguins

penguins = DataFrame(PalmerPenguins.load())
ENV["LINES"] = 19
```
:::

## Work with rows

### Filter rows

Filtering rows with `dplyr` is based on NSE and the `dplyr::filter()` function. To replicate the same results with `TidierData`, you can use `TidierData.@filter()` method which accepts a remarkably similar notation to `dplyr` with the only exceptions that you need `&&` or `||` for boolean operators and that you can omit the percentage signs around `in`. 

::: {.panel-tabset}
### dplyr
```{r}
penguins |> 
  filter(species == "Adelie" & 
           island %in% c("Biscoe", "Dream"))
```
### TidierData
```{julia}
@chain penguins begin
  @filter(species == "Adelie" &&
            island in ("Biscoe", "Dream"))
end
```
:::

### Slice rows

`dplyr::slice()` takes integers with row numbers as inputs, so you can use ranges and arbitrary vectors of integers. `TidierData.@slice()` does exactly the same. 

::: {.panel-tabset}
### dplyr
```{r}
penguins |> 
  slice(10:20)
```
### TidierData
```{julia}
@chain penguins begin
  @slice(10:20)
end
```
:::

### Arrange rows

To orders the rows of a data frame by the values of selected columns, we have `dplyr::arrange()` and `TidierData.@arrange()`. Note that both approaches arrange rows in an an ascending order and puts missing values last as defaults. 

::: {.panel-tabset}
### dplyr
```{r}
penguins |> 
  arrange(island, desc(bill_length_mm))
```
### TidierData
```{julia}
@chain penguins begin
  @arrange(island, desc(bill_length_mm))
end
```
:::

## Work with columns

### Select columns

Selecting a subset of columns works exactly the same with`dplyr::select()` and `TidierData.@select()`.

::: {.panel-tabset}
### dplyr
```{r}
penguins |> 
  select(bill_length_mm, sex)
```
### TidierData
```{julia}
@chain penguins begin
  @select(bill_length_mm, sex)
end
```
:::

### Rename columns

Renaming columns also works exactly the same with `dplyr::rename()` and `TidierData.rename()`.

::: {.panel-tabset}
### dplyr
```{r}
penguins |> 
  rename(bill_length = bill_length_mm,
         bill_depth = bill_depth_mm)
```
### TidierData
```{julia}
@chain penguins begin
  @rename(bill_length = bill_length_mm,
          bill_depth = bill_depth_mm)
end
```
:::

### Mutate columns

Transforming existing columns or creating new ones is an essential part of data analysis. `dplyr::mutate()` and `TidierData.@mutate()` are the work horses for these tasks. Note that you have to split up variable assignments if you want to refer to a newly created variable in `TidierData`, while you can refer to the new variables in the same mutate block in `dplyr`.

::: {.panel-tabset}
### dplyr
```{r}
penguins |> 
  mutate(ones = 1,
         bill_length = bill_length_mm / 10,
         bill_length_squared = bill_length^2) |> 
  select(ones, bill_length_mm, bill_length, bill_length_squared)
```
### TidierData
```{julia}
@chain penguins begin
  @mutate(ones = 1,
          bill_length = bill_length_mm / 10)
  @mutate(bill_length_squared = bill_length^2)
  @select(ones, bill_length_mm, bill_length, bill_length_squared)
end
```
:::

### Relocate columns

`dplyr::relocate()` provides options to change the positions of columns in a data frame, using the same syntax as `dplyr::select()`. In addition, there are the options `.after` and `.before` to provide users with additional shortcuts. 

The recommended way to relocate columns in `TidierData` is to use the `TidierData.@select()` method, but there are no options as in `dplyr::relocate()`. In fact, the safest way to consistently get the correct order of columns is to explicitly specify them. 

::: {.panel-tabset}
### dplyr
```{r}
penguins |> 
  relocate(c(species, bill_length_mm), .before = sex)
```
### TidierData
```{julia}
@chain penguins begin
  @select(island, bill_depth_mm, flipper_length_mm, body_mass_g, 
          species, bill_length_mm, sex)
end
```
:::

## Work with groups of rows

### Simple summaries by group

Let's suppose we want to compute summaries by groups such as means or medians. Both packages are virtually the same again: on the R side you have `dplyr::group_by()` and `dplyr::summarize()`, while on the Julia side you have `TidierData.@group_by()` and `TidierData.@summarize()`. Note that you have to include the `skipmissing()` wrapper in order to drop missing values in the `mean()` function. 

Moreover, `dplyr` also automatically arranges the results by the group, so the reproduce the results of `dplyr`, we need to add `TidierData.@arrange()` to the chain. 

::: {.panel-tabset}
### dplyr
```{r}
penguins |> 
  group_by(island) |> 
  summarize(bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE))
```
### TidierData
```{julia}
@chain penguins begin
  @group_by(island) 
  @summarize(bill_depth_mean = mean(skipmissing(bill_depth_mm)))
  @arrange(island)
end
```
:::

### More complicated summaries by group

Typically, you want to create multiple different summaries by groups. `dplyr` provides a lot of flexibility to create new variables on the fly, as does `TidierData`. For instance, we can pass expressions to them mean functions in order to create the share of female penguins per island in the summary statement.

::: {.panel-tabset}
### dplyr
```{r}
penguins |> 
  group_by(island) |> 
  summarize(count = n(),
            bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE),
            flipper_length_median = median(flipper_length_mm, na.rm = TRUE),
            body_mass_sd = sd(body_mass_g, na.rm = TRUE),
            share_female = mean(sex == "female", na.rm = TRUE))
```
### TidierData
```{julia}
@chain penguins begin
  @group_by(island) 
  @summarize(count = n(),
             bill_depth_mean = mean(skipmissing(bill_depth_mm)),
             flipper_length_median = median(skipmissing(flipper_length_mm)),
             body_mass_sd = std(skipmissing(body_mass_g)),
             share_female = mean(skipmissing(sex == "female")))
  @arrange(island)
end
```
:::

## Conclusion

This post highlights syntactic similarities and differences across R's `dplyr` and Julia's `TidierData` packages. The key difference is between pipes and chains: `dplyr` uses the pipe operator `|>` to chain functions, while `TidierData` uses the `@chain df begin ... end` syntax for piping a value through a series of transformation expressions. Nonetheless, the similarities are remarkable and demonstrate the flexibility of Julia to seemingly replicate the NSE capabilities of R. If you want to play around with Julia or some of its packages, I can highly recommend to take a shortcut using `TidierData`.
