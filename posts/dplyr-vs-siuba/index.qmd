---
title: "Tidy Data Manipulation: dplyr vs siuba"
description: "A comparison of R's dplyr and Python's siuba data manipulation packages"
metadata:
  pagetitle: "Tidy Data Manipulation: dplyr vs siuba"
author: "Christoph Scheuch"
date: "2024-05-18" 
image: thumbnail.png
image-alt: An old school beige-green Chinese bus and a pair of pliers lying on the ground side by side. The scene is well-lit with a vibrant, clear blue sky overhead and lush green grass underfoot. Created with DALL-E.
categories: 
  - R
  - Python
  - Manipulation
---

There are a myriad of options to perform essential data manipulation tasks in R and Python (see, for instance, my other posts on [dplyr vs ibis](../dplyr-vs-ibis/index.qmd) and [dplyr vs pandas](../dplyr-vs-pandas/index.qmd)). However, if we want to do tidy data science in R, there is a clear forerunner: `dplyr`. In the world of Python, `siuba` is around since 2019 and a dedicated port of `dplyr` and other R libraries. In this blog post, I illustrate their syntactic similarities and highlight differences between these two packages that emerge for a few key tasks. 

Before we dive into the comparison, a short introduction to the packages: the `dplyr` package in R allows users to refer to columns without quotation marks due to its implementation of non-standard evaluation (NSE). NSE is a programming technique used in R that allows functions to capture the expressions passed to them as arguments, rather than just the values of those arguments. The primary goal of NSE in the context of `dplyr` is to create a more user-friendly and intuitive syntax. This makes data manipulation tasks more straightforward and aligns with the general philosophy of the `tidyverse` to make data science faster, easier, and more fun.[^1]

The `siuba` package in Python offers a similar user-friendly experience for data manipulation by allowing users to work with data frames in a way that mimics `dplyr`'s intuitive syntax. `siuba` leverages Python's syntax and capabilities, enabling operations like filtering, selecting, and mutating without the need for extensive boilerplate code. `siuba` tries to capture the spirit of concise and expressive data manipulation via NSE by introducing siu expressions and a pipe (which we will both use below). This approach aligns with the broader goals of making data science more accessible and efficient, providing Python users with a powerful tool that enhances productivity and readability in their data analysis workflow.

## Loading packages and data

We start by loading the main packages of interest and the popular `palmerpenguins` package that exists for both R and Python. We then use the `penguins` data frame as the data to compare all functions and methods below. 

::: {.panel-tabset}
### dplyr
```{r}
#| message: false
library(dplyr)
library(palmerpenguins)

penguins <- palmerpenguins::penguins
```
### siuba
```{python}
#| message: false
from siuba import _, filter, arrange, select, rename, mutate, group_by, summarize
from palmerpenguins import load_penguins

penguins = load_penguins()
```
:::

## Work with rows

### Filter rows

Filtering rows works very similarly for both packages, they even have the same function names: `dplyr::filter()` and `siuba.filter()`. To select columns in `siuba`, you need the `siuba._` expression that allows you to specify what action you want to perform on a column and that is later evaluated by functions such as `siuba.filter()` 

::: {.panel-tabset}
#### dplyr
```{r}
penguins |> 
  filter(species == "Adelie" & 
           island %in% c("Biscoe", "Dream"))
```
#### siuba
```{python}
(penguins 
  >> filter((_.species == "Adelie") &
              (_.island.isin(["Biscoe", "Dream"])))
)
```
:::

### Slice rows

`dplyr::slice()` takes integers with row numbers as inputs, so you can use ranges and arbitrary vectors of integers. There is no direct equivalent in `siuba`, but we can just use the `iloc` method to replicate the results. For instance, to the the same result of slicing rows 10 to 20, the code looks as follows (note that indexing starts at 0 in Python, while it starts at 1 in R):

::: {.panel-tabset}
#### dplyr
```{r}
penguins |> 
  slice(10:20)
```
#### siuba
```{python}
penguins.iloc[9:19]
```
:::

### Arrange rows

To orders the rows of a data frame by the values of selected columns, we have `dplyr::arrange()` and `siuba.arrange()`.

::: {.panel-tabset}
#### dplyr
```{r}
penguins |> 
  arrange(island, desc(bill_length_mm))
```
#### siuba
```{python}
(penguins 
  >> arrange(_.island, -_.bill_length_mm)
)
```
:::

## Work with columns

### Select columns

Selecting a subset of columns works essentially the same for both `dplyr::select()` and `siuba.select()`.

::: {.panel-tabset}
#### dplyr
```{r}
penguins |> 
  select(bill_length_mm, sex)
```
#### siuba
```{python}
(penguins
  >> select(_.bill_length_mm, _.sex)
)
```
:::

### Rename columns

Renaming columns also works the same in `dplyr::rename()` and `siuba.rename()`.

::: {.panel-tabset}
#### dplyr
```{r}
penguins |> 
  rename(bill_length = bill_length_mm,
         bill_depth = bill_depth_mm)
```
#### siuba
```{python}
(penguins
  >> rename(bill_length = _.bill_length_mm, 
            bill_depth = _.bill_depth_mm)
)
```
:::

### Mutate columns

Transforming existing columns or creating new ones is an essential part of data analysis. `dplyr::mutate()` and `siuba.mutate()` are the work horses for these tasks. Both approaches have a very similar syntax and capabilities. Compared to other Python libraries, you don't have to split up variable assignments across mutate blocks if you want to refer to a newly created variable in `siuba`.

::: {.panel-tabset}
#### dplyr
```{r}
penguins |> 
  mutate(ones = 1,
         bill_length = bill_length_mm / 10,
         bill_length_squared = bill_length^2) |> 
  select(ones, bill_length_mm, bill_length, bill_length_squared)
```
#### siuba
```{python}
(penguins
  >> mutate(ones = 1,
            bill_length = _.bill_length_mm / 10,
            bill_length_squared = _.bill_length ** 2)
  >> select(_.ones, _.bill_length_mm, _.bill_length, _.bill_length_squared)
)
```
:::

### Relocate columns

`dplyr::relocate()` provides options to change the positions of columns in a data frame, using the same syntax as `dplyr::select()`. In addition, there are the options `.after` and `.before` to provide users with additional shortcuts. 

The recommended way to relocate columns in `siuba` is to use the `siuba.select()` method, but there are no options as in `dplyr::relocate()`. In fact, the safest way to consistently get the correct order of columns is to explicitly specify them. 

::: {.panel-tabset}
#### dplyr
```{r}
penguins |> 
  relocate(c(species, bill_length_mm), .before = sex)
```
#### siuba
```{python}
(penguins 
  >> select(_.island, _.bill_depth_mm, _.flipper_length_mm, _.body_mass_g, 
            _.species, _.bill_length_mm, _.sex)
)
```
:::

## Work with groups of rows

### Simple summaries by group

Let's suppose we want to compute summaries by groups such as means or medians. Both packages are very similar again: on the R side you have `dplyr::group_by()` and `dplyr::summarize()`, while on the Python side you have `siuba.group_by()` and `siuba.summarize()`. 

::: {.panel-tabset}
#### dplyr
```{r}
penguins |> 
  group_by(island) |> 
  summarize(bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE))
```
#### siuba
```{python}
(penguins
  >> group_by(_.island)
  >> summarize(bill_depth_mean = _.bill_depth_mm.mean())
)
```
:::

### More complicated summaries by group

Typically, you want to create multiple different summaries by groups. `dplyr` provides a lot of flexibility to create new variables on the fly and `siuba` is able to replicate these capabilities perfectly!

::: {.panel-tabset}
#### dplyr
```{r}
penguins |> 
  group_by(island) |> 
  summarize(count = n(),
            bill_depth_mean = mean(bill_depth_mm, na.rm = TRUE),
            flipper_length_median = median(flipper_length_mm, na.rm = TRUE),
            body_mass_sd = sd(body_mass_g, na.rm = TRUE),
            share_female = mean(sex == "female", na.rm = TRUE))
```
#### siuba
```{python}
(penguins
  >> group_by(_.island)
  >> summarize(count = _.island.count(),
               bill_depth_mean = _.bill_depth_mm.mean(),
               flipper_length_median = _.flipper_length_mm.median(),
               body_mass_sd = _.body_mass_g.std(),
               share_female = (_.sex == "female").mean())
)
```
:::

## Conclusion

This post highlights syntactic similarities and differences across R's `dplyr` package and Python's `siuba` library. One key point emerges: `dplyr` heavily relies on NSE to enable a syntax that refrains from using strings and column selectors, something that is strictly speaking not possible in Python. However, `siuba`'s approach using siu expressions and the pipe provide a very similar syntax to `dplyr`. I want to close this post by emphasizing that both languages and packages have their own merits and I won't strictly recommend one over the other - maybe in another post :smile:

[^1]: See the unifying principles of the tidyverse: [https://design.tidyverse.org/unifying.html](https://design.tidyverse.org/unifying.html).